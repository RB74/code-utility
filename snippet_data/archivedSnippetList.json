{
  "data": [
    {
      "id": "binarySearch",
      "type": "snippetListing",
      "title": "binarySearch",
      "attributes": {
        "text": "Use recursion. Similar to `Array.prototype.indexOf()` that finds the index of a value within an array.\nThe difference being this operation only works with sorted arrays which offers a major performance boost due to it's logarithmic nature when compared to a linear search or `Array.prototype.indexOf()`.\n\nSearch a sorted array by repeatedly dividing the search interval in half.\nBegin with an interval covering the whole array.\nIf the value of the search is less than the item in the middle of the interval, recurse into the lower half. Otherwise recurse into the upper half.\nRepeatedly recurse until the value is found which is the mid or you've recursed to a point that is greater than the length which means the value doesn't exist and return `-1`.\n\n",
        "tags": [
          "algorithm",
          "beginner"
        ]
      },
      "meta": {
        "hash": "90bc13657b6f59a1e0014e6672b9b95f925f4948e9324125a79e34d0a21b4468"
      }
    },
    {
      "id": "celsiusToFahrenheit",
      "type": "snippetListing",
      "title": "celsiusToFahrenheit",
      "attributes": {
        "text": "Celsius to Fahrenheit temperature conversion.\n\nFollows the conversion formula `F =  1.8C + 32`.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "07ea927d2724e68224c7f80499159c3795650fe2e18e123e3df1a55e2313f624"
      }
    },
    {
      "id": "cleanObj",
      "type": "snippetListing",
      "title": "cleanObj",
      "attributes": {
        "text": "Removes any properties except the ones specified from a JSON object.\n\nUse `Object.keys()` method to loop over given JSON object and deleting keys that are not included in given array.\nIf you pass a special key,`childIndicator`, it will search deeply apply the function to inner objects, too.\n\n",
        "tags": [
          "object",
          "beginner"
        ]
      },
      "meta": {
        "hash": "23455050bdb213ec6e15eb7ba8bd3fa7ecfc5bd82f73929c6c9754588f8a9e12"
      }
    },
    {
      "id": "collatz",
      "type": "snippetListing",
      "title": "collatz",
      "attributes": {
        "text": "Applies the Collatz algorithm.\n\nIf `n` is even, return `n/2`. Otherwise, return `3n+1`.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "ab508ec0a9fb3d7a1269ace24e4909152b74ed95e6481323e1fdd66aa1ee19b9"
      }
    },
    {
      "id": "countVowels",
      "type": "snippetListing",
      "title": "countVowels",
      "attributes": {
        "text": "Retuns `number` of vowels in provided string.\n\nUse a regular expression to count the number of vowels `(A, E, I, O, U)` in a `string`.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "fdd106047031a9cd32d33ebe1d5bb5c992c5ce2675712da378080e46f9ca50a2"
      }
    },
    {
      "id": "factors",
      "type": "snippetListing",
      "title": "factors",
      "attributes": {
        "text": "Returns the array of factors of the given `num`.\nIf the second argument is set to `true` returns only the prime factors of `num`.\nIf `num` is `1` or `0` returns an empty array.\nIf `num` is less than `0` returns all the factors of `-int` together with their additive inverses.\n\nUse `Array.from()`, `Array.prototype.map()` and `Array.prototype.filter()` to find all the factors of `num`.\nIf given `num` is negative, use `Array.prototype.reduce()` to add the additive inverses to the array.\nReturn all results if `primes` is `false`, else determine and return only the prime factors using `isPrime` and `Array.prototype.filter()`.\nOmit the second argument, `primes`, to return prime and non-prime factors by default.\n\n**Note**:- _Negative numbers are not considered prime._\n\n",
        "tags": [
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "1e15cb532a03c2b283df16b6ee9079777679940f0032d9ce3e3193988c1f3d6c"
      }
    },
    {
      "id": "fahrenheitToCelsius",
      "type": "snippetListing",
      "title": "fahrenheitToCelsius",
      "attributes": {
        "text": "Fahrenheit to Celsius temperature conversion.\n\nFollows the conversion formula `C = (F - 32) * 5/9`.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "5d91abbc4451394c1fe4290d63a0913e2cf41b1c02ffe8e9276b491c0f3803f1"
      }
    },
    {
      "id": "fibonacciCountUntilNum",
      "type": "snippetListing",
      "title": "fibonacciCountUntilNum",
      "attributes": {
        "text": "Returns the number of fibonnacci numbers up to `num`(`0` and `num` inclusive).\n\nUse a mathematical formula to calculate the number of fibonacci numbers until `num`.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "0b757d87765c3539b1b921ff9b915195a81e0f0653d95ca2382deea1f69a22d8"
      }
    },
    {
      "id": "fibonacciUntilNum",
      "type": "snippetListing",
      "title": "fibonacciUntilNum",
      "attributes": {
        "text": "Generates an array, containing the Fibonacci sequence, up until the nth term.\n\nCreate an empty array of the specific length, initializing the first two values (`0` and `1`).\nUse `Array.prototype.reduce()` to add values into the array, using the sum of the last two values, except for the first two.\nUses a mathematical formula to calculate the length of the array required.\n\n",
        "tags": [
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "d3d2d3e886ab1aa06315d00020c577884833a2fa2de851c2e736e398ebd21dc2"
      }
    },
    {
      "id": "heronArea",
      "type": "snippetListing",
      "title": "heronArea",
      "attributes": {
        "text": "Returns the area of a triangle using only the 3 side lengths, Heron's formula. Assumes that the sides define a valid triangle. Does NOT assume it is a right triangle.\n\nMore information on what Heron's formula is and why it works available here: https://en.wikipedia.org/wiki/Heron%27s_formula.\n\nUses `Math.sqrt()` to find the square root of a value.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "9cb879ebfd9ca4a4da57f81f26a512017ece8f57d3892738d249319bfce01cc7"
      }
    },
    {
      "id": "howManyTimes",
      "type": "snippetListing",
      "title": "howManyTimes",
      "attributes": {
        "text": "Returns the number of times `num` can be divided by `divisor` (integer or fractional) without getting a fractional answer.\nWorks for both negative and positive integers.\n\nIf `divisor` is `-1` or `1` return `Infinity`.\nIf `divisor` is `-0` or `0` return `0`.\nOtherwise, keep dividing `num` with `divisor` and incrementing `i`, while the result is an integer.\nReturn the number of times the loop was executed, `i`.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "80bc7d5ac13bb3efe634dec4beacc3b9d3e72a973359b163bce3ccd7bda4f4b8"
      }
    },
    {
      "id": "httpDelete",
      "type": "snippetListing",
      "title": "httpDelete",
      "attributes": {
        "text": "Makes a `DELETE` request to the passed URL.\n\nUse `XMLHttpRequest` web api to make a `delete` request to the given `url`.\nHandle the `onload` event, by running the provided `callback` function.\nHandle the `onerror` event, by running the provided `err` function.\nOmit the third argument, `err` to log the request to the console's error stream by default.\n\n",
        "tags": [
          "browser",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "4f0e17ac776e2d66e0b036a5b4dc080d34917df6a408f792d20440f98daa0273"
      }
    },
    {
      "id": "httpPut",
      "type": "snippetListing",
      "title": "httpPut",
      "attributes": {
        "text": "Makes a `PUT` request to the passed URL.\n\nUse `XMLHttpRequest` web api to make a `put` request to the given `url`.\nSet the value of an `HTTP` request header with `setRequestHeader` method.\nHandle the `onload` event, by running the provided `callback` function.\nHandle the `onerror` event, by running the provided `err` function.\nOmit the last argument, `err` to log the request to the console's error stream by default.\n\n",
        "tags": [
          "browser",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "f6dccbcfcf5f64cdfef16c87efac6c58bfb3448b1e35c913475277d39e3aeffa"
      }
    },
    {
      "id": "isArmstrongNumber",
      "type": "snippetListing",
      "title": "isArmstrongNumber",
      "attributes": {
        "text": "Checks if the given number is an Armstrong number or not.\n\nConvert the given number into an array of digits. Use the exponent operator (`**`) to get the appropriate power for each digit and sum them up. If the sum is equal to the number itself, return `true` otherwise `false`.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "99ea08c72cebd7fc5f46731d47f3f2caaad25c2bf36403fe1d9c9e01699994f0"
      }
    },
    {
      "id": "isSimilar",
      "type": "snippetListing",
      "title": "isSimilar",
      "attributes": {
        "text": "Determines if the `pattern` matches with `str`.\n\nUse `String.toLowerCase()` to convert both strings to lowercase, then loop through `str` and determine if it contains all characters of `pattern` and in the correct order.\nAdapted from [here](https://github.com/forrestthewoods/lib_fts/blob/80f3f8c52db53428247e741b9efe2cde9667050c/code/fts_fuzzy_match.js#L18).\n\n",
        "tags": [
          "string",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "e2d9d4521c2abf0fe239ee83e33624f6d23c461f3fcd8f42f3c1bd067033d2b3"
      }
    },
    {
      "id": "JSONToDate",
      "type": "snippetListing",
      "title": "JSONToDate",
      "attributes": {
        "text": "Converts a JSON object to a date.\n\nUse `Date()`, to convert dates in JSON format to readable format (`dd/mm/yyyy`).\n\n",
        "tags": [
          "object",
          "date",
          "beginner"
        ]
      },
      "meta": {
        "hash": "33934cf9fb3f740afb520c98f0375de095c8abdc0113728cb71362ba2f1402a0"
      }
    },
    {
      "id": "kmphToMph",
      "type": "snippetListing",
      "title": "kmphToMph",
      "attributes": {
        "text": "Convert kilometers/hour to miles/hour.\n\nMultiply the constant of proportionality with the argument.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "def6f0c50fd613013b41723b5c0aa86398b567bb196325fd6da4403f91bae8bb"
      }
    },
    {
      "id": "levenshteinDistance",
      "type": "snippetListing",
      "title": "levenshteinDistance",
      "attributes": {
        "text": "Calculates the [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) between two strings.\n\nCalculates the number of changes (substitutions, deletions or additions) required to convert `string1` to `string2`. \nCan also be used to compare two strings as shown in the second example.\n\n",
        "tags": [
          "algorithm",
          "advanced"
        ]
      },
      "meta": {
        "hash": "16986950549052514c4d82ec65c555118b3e9c7270ed9efe108d45fab9f26cb4"
      }
    },
    {
      "id": "mphToKmph",
      "type": "snippetListing",
      "title": "mphToKmph",
      "attributes": {
        "text": "Convert miles/hour to kilometers/hour.\n\nMultiply the constant of proportionality with the argument.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "1d6a2b08234f9b86ffb095bb645b5cc22624d17aa2d06badc177df3bd0a7055f"
      }
    },
    {
      "id": "pipeLog",
      "type": "snippetListing",
      "title": "pipeLog",
      "attributes": {
        "text": "Logs a value and returns it.\n\nUse `console.log` to log the supplied value, combined with the `||` operator to return it.\n\n",
        "tags": [
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "d264febc32505d36187d7cd7aa948766e520c36af21cedd16001af19cda0cd3a"
      }
    },
    {
      "id": "quickSort",
      "type": "snippetListing",
      "title": "quickSort",
      "attributes": {
        "text": "QuickSort an Array (ascending sort by default).\n\nUse recursion.\nUse `Array.prototype.filter` and spread operator (`...`) to create an array that all elements with values less than the pivot come before the pivot, and all elements with values greater than the pivot come after it.\nIf the parameter `desc` is truthy, return array sorts in descending order.\n\n",
        "tags": [
          "algorithm",
          "recursion",
          "beginner"
        ]
      },
      "meta": {
        "hash": "b0e8729f35e7e7fb2406fe5c194cac83630cffe0d99dd671f08e832436a6e724"
      }
    },
    {
      "id": "removeVowels",
      "type": "snippetListing",
      "title": "removeVowels",
      "attributes": {
        "text": "Returns all the vowels in a `str` replaced by `repl`.\n\nUse `String.prototype.replace()` with a regexp to replace all vowels in `str`.\nOmot `repl` to use a default value of `''`.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "45953ff742f8edfb77f0c1dfbcf28f85b81bd4703daecaa9ba59d180fd55aa23"
      }
    },
    {
      "id": "solveRPN",
      "type": "snippetListing",
      "title": "solveRPN",
      "attributes": {
        "text": "Solves the given mathematical expression in [reverse polish notation](https://en.wikipedia.org/wiki/Reverse_Polish_notation).\nThrows appropriate errors if there are unrecognized symbols or the expression is wrong. The valid operators are :- `+`,`-`,`*`,`/`,`^`,`**` (`^`&`**` are the exponential symbols and are same). This snippet does not supports any unary operators.\n\nUse a dictionary, `OPERATORS` to specify each operator's matching mathematical operation.\nUse `String.prototype.replace()` with a regular expression to replace `^` with `**`, `String.prototype.split()` to tokenize the string and `Array.prototype.filter()` to remove empty tokens.\nUse `Array.prototype.forEach()` to parse each `symbol`, evaluate it as a numeric value or operator and solve the mathematical expression.\nNumeric values are converted to floating point numbers and pushed to a `stack`, while operators are evaluated using the `OPERATORS` dictionary and pop elements from the `stack` to apply operations.\n\n",
        "tags": [
          "algorithm",
          "advanced"
        ]
      },
      "meta": {
        "hash": "ff1f2f2a5cb5f00cf80322d9af5ce37d9c9b1492c468ea04c112b8a55be71232"
      }
    },
    {
      "id": "speechSynthesis",
      "type": "snippetListing",
      "title": "speechSynthesis",
      "attributes": {
        "text": "Performs speech synthesis (experimental).\n\nUse `SpeechSynthesisUtterance.voice` and `window.speechSynthesis.getVoices()` to convert a message to speech.\nUse `window.speechSynthesis.speak()` to play the message.\n\nLearn more about the [SpeechSynthesisUtterance interface of the Web Speech API](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance).\n\n",
        "tags": [
          "browser",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "fc2ca6d0b44a47a3b0eb638ec47d10964eff3dab91707186cc96dc53d178c135"
      }
    },
    {
      "id": "squareSum",
      "type": "snippetListing",
      "title": "squareSum",
      "attributes": {
        "text": "Squares each number in an array and then sums the results together.\n\nUse `Array.prototype.reduce()` in combination with `Math.pow()` to iterate over numbers and sum their squares into an accumulator.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "f665ac48ee5f707eff3f0a13c9d9e844370765fa083e96126a6d64da8c29275a"
      }
    }
  ],
  "meta": {
    "specification": "http://jsonapi.org/format/",
    "type": "snippetListingArray",
    "scope": "./snippets_archive"
  }
}


# Starting...
# 360 test suites found.

#  PASS  test/uniqueElements/uniqueElements.test.js

ok 1 — uniqueElements is a Function
ok 2 — uniqueElements([1, 2, 2, 3, 4, 4, 5]) returns [1,2,3,4,5]
ok 3 — uniqueElements([1, 23, 53]) returns [1, 23, 53]
ok 4 — uniqueElements([true, 0, 1, false, false, undefined, null, '']) returns [true, 0, 1, false, false, undefined, null, '']
ok 5 — uniqueElements() returns []
ok 6 — uniqueElements(null) returns []
ok 7 — uniqueElements(undefined) returns []
ok 8 — uniqueElements('strt') returns ['s', 't', 'r']
ok 9 — uniqueElements(1, 1, 2543, 534, 5) throws an error
ok 10 — uniqueElements({}) throws an error
ok 11 — uniqueElements(true) throws an error
ok 12 — uniqueElements(false) throws an error
ok 13 — uniqueElements([true, 0, 1, false, false, undefined, null]) takes less than 2s to run

#  PASS  test/toSnakeCase/toSnakeCase.test.js

ok 14 — toSnakeCase is a Function
ok 15 — toSnakeCase('camelCase') returns camel_case
ok 16 — toSnakeCase('some text') returns some_text
ok 17 — toSnakeCase('some-mixed_string With spaces_underscores-and-hyphens') returns some_mixed_string_with_spaces_underscores_and_hyphens
ok 18 — toSnakeCase('IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML') returns i_am_listening_to_fm_while_loading_different_url_on_my_browser_and_also_editing_some_xml_and_html
ok 19 — toSnakeCase() returns undefined
ok 20 — toSnakeCase([]) throws an error
ok 21 — toSnakeCase({}) throws an error
ok 22 — toSnakeCase(123) throws an error
ok 23 — toSnakeCase(IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML) takes less than 2s to run

#  PASS  test/toKebabCase/toKebabCase.test.js

ok 24 — toKebabCase is a Function
ok 25 — toKebabCase('camelCase') returns camel-case
ok 26 — toKebabCase('some text') returns some-text
ok 27 — toKebabCase('some-mixed-string With spaces-underscores-and-hyphens') returns some-mixed-string-with-spaces-underscores-and-hyphens
ok 28 — toKebabCase('IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML') returns i-am-listening-to-fm-while-loading-different-url-on-my-browser-and-also-editing-some-xml-and-html
ok 29 — toKebabCase() returns undefined
ok 30 — toKebabCase([]) throws an erro
ok 31 — toKebabCase({}) throws an erro
ok 32 — toKebabCase(123) throws an erro
ok 33 — toKebabCase(IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML) takes less than 2s to run

#  PASS  test/toCamelCase/toCamelCase.test.js

ok 34 — toCamelCase is a Function
ok 35 — toCamelCase('some_database_field_name') returns someDatabaseFieldName
ok 36 — toCamelCase('Some label that needs to be camelized') returns someLabelThatNeedsToBeCamelized
ok 37 — toCamelCase('some-javascript-property') return someJavascriptProperty
ok 38 — toCamelCase('some-mixed_string with spaces_underscores-and-hyphens') returns someMixedStringWithSpacesUnderscoresAndHyphens
ok 39 — toCamelCase() throws a error
ok 40 — toCamelCase([]) throws a error
ok 41 — toCamelCase({}) throws a error
ok 42 — toCamelCase(123) throws a error
ok 43 — toCamelCase(some-mixed_string with spaces_underscores-and-hyphens) takes less than 2s to run

#  PASS  test/is/is.test.js

ok 44 — is is a Function
ok 45 — Works for arrays with data
ok 46 — Works for empty arrays
ok 47 — Works for arrays, not objects
ok 48 — Works for objects
ok 49 — Works for maps
ok 50 — Works for regular expressions
ok 51 — Works for sets
ok 52 — Works for weak maps
ok 53 — Works for weak sets
ok 54 — Works for strings - returns true for primitive
ok 55 — Works for strings - returns true when using constructor
ok 56 — Works for numbers - returns true for primitive
ok 57 — Works for numbers - returns true when using constructor
ok 58 — Works for booleans - returns true for primitive
ok 59 — Works for booleans - returns true when using constructor
ok 60 — Works for functions

#  PASS  test/average/average.test.js

ok 61 — average is a Function
ok 62 — average(true) returns 0
ok 63 — average(false) returns 1
ok 64 — average(9, 1) returns 5
ok 65 — average(153, 44, 55, 64, 71, 1122, 322774, 2232, 23423, 234, 3631) returns 32163.909090909092
ok 66 — average(1, 2, 3) returns 2
ok 67 — average(null) returns 0
ok 68 — average(1, 2, 3) returns NaN
ok 69 — average(String) returns NaN
ok 70 — average({ a: 123}) returns NaN
ok 71 — average([undefined, 0, string]) returns NaN
ok 72 — average([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 1122, 32124, 23232]) takes less than 2s to run

#  PASS  test/union/union.test.js

ok 73 — union is a Function
ok 74 — union([1, 2, 3], [4, 3, 2]) returns [1, 2, 3, 4]
ok 75 — union('str', 'asd') returns [ 's', 't', 'r', 'a', 'd' ]
ok 76 — union([[], {}], [1, 2, 3]) returns [[], {}, 1, 2, 3]
ok 77 — union([], []) returns []
ok 78 — union() throws an error
ok 79 — union(true, 'str') throws an error
ok 80 — union('false', true) throws an error
ok 81 — union((123, {}) throws an error
ok 82 — union([], {}) throws an error
ok 83 — union(undefined, null) throws an error
ok 84 — union([1, 2, 3], [4, 3, 2]) takes less than 2s to run

#  PASS  test/validateNumber/validateNumber.test.js

ok 85 — validateNumber is a Function
ok 86 — validateNumber(9) returns true
ok 87 — validateNumber(234asd.slice(0, 2)) returns true
ok 88 — validateNumber(1232) returns true
ok 89 — validateNumber(1232 + 13423) returns true
ok 90 — validateNumber(1232 * 2342 * 123) returns true
ok 91 — validateNumber(1232.23423536) returns true
ok 92 — validateNumber(234asd) returns false
ok 93 — validateNumber(e234d) returns false
ok 94 — validateNumber(false) returns false
ok 95 — validateNumber(true) returns false
ok 96 — validateNumber(null) returns false
ok 97 — validateNumber(123 * asd) returns false

#  PASS  test/toSafeInteger/toSafeInteger.test.js

ok 98 — toSafeInteger is a Function
ok 99 — Number(toSafeInteger(3.2)) is a number
ok 100 — Converts a value to a safe integer
ok 101 — toSafeInteger('4.2') returns 4
ok 102 — toSafeInteger(4.6) returns 5
ok 103 — toSafeInteger([]) returns 0
ok 104 — isNaN(toSafeInteger([1.5, 3124])) is true
ok 105 — isNaN(toSafeInteger('string')) is true
ok 106 — isNaN(toSafeInteger({})) is true
ok 107 — isNaN(toSafeInteger()) is true
ok 108 — toSafeInteger(Infinity) returns 9007199254740991
ok 109 — toSafeInteger(3.2) takes less than 2s to run

#  PASS  test/isPrimitive/isPrimitive.test.js

ok 110 — isPrimitive is a Function
ok 111 — isPrimitive(null) is primitive
ok 112 — isPrimitive(undefined) is primitive
ok 113 — isPrimitive(string) is primitive
ok 114 — isPrimitive(true) is primitive
ok 115 — isPrimitive(50) is primitive
ok 116 — isPrimitive('Hello') is primitive
ok 117 — isPrimitive(false) is primitive
ok 118 — isPrimitive(Symbol()) is primitive
ok 119 — isPrimitive([1, 2, 3]) is not primitive
ok 120 — isPrimitive({ a: 123 }) is not primitive
ok 121 — isPrimitive({ a: 123 }) takes less than 2s to run

#  PASS  test/zipObject/zipObject.test.js

ok 122 — zipObject is a Function
ok 123 — zipObject([a, b, c], [1, 2]) returns {a: 1, b: 2, c: undefined}
ok 124 — zipObject([a, b], [1, 2, 3]) returns {a: 1, b: 2}
ok 125 — zipObject([a, b, c], string) returns { a: s, b: t, c: r }
ok 126 — zipObject([a], string) returns { a: s }
ok 127 — zipObject() throws an error
ok 128 — zipObject((['string'], null) throws an error
ok 129 — zipObject(null, [1]) throws an error
ok 130 — zipObject('string') throws an error
ok 131 — zipObject('test', 'string') throws an error

#  PASS  test/quickSort/quickSort.test.js

ok 132 — quickSort is a Function
ok 133 — quickSort([5, 6, 4, 3, 1, 2]) returns [1, 2, 3, 4, 5, 6]
ok 134 — quickSort([-1, 0, -2]) returns [-2, -1, 0]
ok 135 — quickSort() throws an error
ok 136 — quickSort(123) throws an error
ok 137 — quickSort({ 234: string}) throws an error
ok 138 — quickSort(null) throws an error
ok 139 — quickSort(undefined) throws an error
ok 140 — quickSort([11, 1, 324, 23232, -1, 53, 2, 524, 32, 13, 156, 133, 62, 12, 4]) takes less than 2s to run

#  PASS  test/round/round.test.js

ok 141 — round is a Function
ok 142 — round(1.005, 2) returns 1.01
ok 143 — round(123.3423345345345345344, 11) returns 123.34233453453
ok 144 — round(3.342, 11) returns 3.342
ok 145 — round(1.005) returns 1
ok 146 — round([1.005, 2]) returns NaN
ok 147 — round(string) returns NaN
ok 148 — round() returns NaN
ok 149 — round(132, 413, 4134) returns NaN
ok 150 — round({a: 132}, 413) returns NaN
ok 151 — round(123.3423345345345345344, 11) takes less than 2s to run

#  PASS  test/yesNo/yesNo.test.js

ok 152 — yesNo is a Function
ok 153 — yesNo(Y) returns true
ok 154 — yesNo(yes) returns true
ok 155 — yesNo(foo, true) returns true
ok 156 — yesNo(No) returns false
ok 157 — yesNo() returns false
ok 158 — yesNo(null) returns false
ok 159 — yesNo(undefined) returns false
ok 160 — yesNo([123, null]) returns false
ok 161 — yesNo([Yes, No]) returns false
ok 162 — yesNo({ 2: Yes }) returns false
ok 163 — yesNo([Yes, No], true) returns true
ok 164 — yesNo({ 2: Yes }, true) returns true

#  PASS  test/isSorted/isSorted.test.js

ok 165 — isSorted is a Function
ok 166 — Array is sorted in ascending order
ok 167 — Array is sorted in ascending order
ok 168 — Array is sorted in ascending order
ok 169 — Array is sorted in ascending order
ok 170 — Array is sorted in descending order
ok 171 — Array is sorted in descending order
ok 172 — Array is sorted in descending order
ok 173 — Array is sorted in descending order
ok 174 — Array is empty
ok 175 — Array is not sorted, direction changed in array
ok 176 — Array is not sorted, direction changed in array

#  PASS  test/words/words.test.js

ok 177 — words is a Function
ok 178 — words('I love javaScript!!') returns [I, love, javaScript]
ok 179 — words('python, javaScript & coffee') returns [python, javaScript, coffee]
ok 180 — words(I love javaScript!!) returns an array
ok 181 — words() throws an error
ok 182 — words(null) throws an error
ok 183 — words(undefined) throws an error
ok 184 — words({}) throws an error
ok 185 — words([]) throws an error
ok 186 — words(1234) throws an error

#  PASS  test/longestItem/longestItem.test.js

ok 187 — longestItem is a Function
ok 188 — Returns the longest object from plain values
ok 189 — Returns the longest object from a spread array
ok 190 — Returns the longest object from mixed input
ok 191 — Returns the longest array
ok 192 — Returns the longest object when comparing arrays and strings
ok 193 — Returns undefined without any input
ok 194 — Returns first found of all similar
ok 195 — Throws TypeError if all inputs are undefined

#  PASS  test/without/without.test.js

ok 196 — without is a Function
ok 197 — without([2, 1, 2, 3], 1, 2) returns [3]
ok 198 — without([]) returns []
ok 199 — without([3, 1, true, '3', true], '3', true) returns [3, 1]
ok 200 — without('string'.split(''), 's', 't', 'g') returns ['r', 'i', 'n']
ok 201 — without() throws an error
ok 202 — without(null) throws an error
ok 203 — without(undefined) throws an error
ok 204 — without(123) throws an error
ok 205 — without({}) throws an error

#  PASS  test/chunk/chunk.test.js

ok 206 — chunk is a Function
ok 207 — chunk([1, 2, 3, 4, 5], 2) returns [[1,2],[3,4],[5]]
ok 208 — chunk([]) returns []
ok 209 — chunk(123) returns []
ok 210 — chunk({ a: 123}) returns []
ok 211 — chunk(string, 2) returns [ st, ri, ng ]
ok 212 — chunk() throws an error
ok 213 — chunk(undefined) throws an error
ok 214 — chunk(null) throws an error
ok 215 — chunk(This is a string, 2) takes less than 2s to run

#  PASS  test/zip/zip.test.js

ok 216 — zip is a Function
ok 217 — zip([a, b], [1, 2], [true, false]) returns [[a, 1, true], [b, 2, false]]
ok 218 — zip([a], [1, 2], [true, false]) returns [[a, 1, true], [undefined, 2, false]]
ok 219 — zip([]) returns []
ok 220 — zip(123) returns []
ok 221 — zip([a, b], [1, 2], [true, false]) returns an Array
ok 222 — zip([a], [1, 2], [true, false]) returns an Array
ok 223 — zip(null) throws an error
ok 224 — zip(undefined) throws an error

#  PASS  test/uniqueElementsByRight/uniqueElementsByRight.test.js

ok 225 — uniqueElementsByRight is a Function
ok 226 — uniqueElementsByRight works for properties
ok 227 — uniqueElementsByRight works for nested properties

#  PASS  test/isEmpty/isEmpty.test.js

ok 228 — isEmpty is a Function
ok 229 — Returns true for empty Map
ok 230 — Returns true for empty Set
ok 231 — Returns true for empty array
ok 232 — Returns true for empty object
ok 233 — Returns true for empty string
ok 234 — Returns false for non-empty array
ok 235 — Returns false for non-empty object
ok 236 — Returns false for non-empty string
ok 237 — Returns true - type is not considered a collection
ok 238 — Returns true - type is not considered a collection

#  PASS  test/uniqueElementsBy/uniqueElementsBy.test.js

ok 239 — uniqueElementsBy is a Function
ok 240 — uniqueElementsBy works for properties
ok 241 — uniqueElementsBy works for nested properties

#  PASS  test/last/last.test.js

ok 242 — last is a Function
ok 243 — last({ a: 1234}) returns undefined
ok 244 — last([1, 2, 3]) returns 3
ok 245 — last({ 0: false}) returns undefined
ok 246 — last(String) returns g
ok 247 — last(null) throws an Error
ok 248 — last(undefined) throws an Error
ok 249 — last() throws an Error
ok 250 — last([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 1122, 32124, 23232]) takes less than 2s to run

#  PASS  test/head/head.test.js

ok 251 — head is a Function
ok 252 — head({ a: 1234}) returns undefined
ok 253 — head([1, 2, 3]) returns 1
ok 254 — head({ 0: false}) returns false
ok 255 — head(String) returns S
ok 256 — head(null) throws an Error
ok 257 — head(undefined) throws an Error
ok 258 — head() throws an Error
ok 259 — head([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 1122, 32124, 23232]) takes less than 2s to run

#  PASS  test/filterNonUniqueBy/filterNonUniqueBy.test.js

ok 260 — filterNonUniqueBy is a Function
ok 261 — filterNonUniqueBy works for properties
ok 262 — filterNonUniqueBy works for nested properties

#  PASS  test/all/all.test.js

ok 263 — all is a Function
ok 264 — Returns true for arrays with no falsey values
ok 265 — Returns false for arrays with 0
ok 266 — Returns false for arrays with NaN
ok 267 — Returns false for arrays with undefined
ok 268 — Returns false for arrays with null
ok 269 — Returns false for arrays with empty strings
ok 270 — Returns true with predicate function
ok 271 — Returns false with a predicate function

#  PASS  test/offset/offset.test.js

ok 272 — offset is a Function
ok 273 — Offset of 0 returns the same array.
ok 274 — Offset > 0 returns the offsetted array.
ok 275 — Offset < 0 returns the reverse offsetted array.
ok 276 — Offset greater than the length of the array returns the same array.
ok 277 — Offset less than the negative length of the array returns the same array.
ok 278 — Offsetting empty array returns an empty array.

#  PASS  test/equals/equals.test.js

ok 279 — equals is a Function
ok 280 — { a: [2, {e: 3}], b: [4], c: 'foo' } is equal to { a: [2, {e: 3}], b: [4], c: 'foo' }
ok 281 — [1,2,3] is equal to [1,2,3]
ok 282 — { a: [2, 3], b: [4] } is not equal to { a: [2, 3], b: [6] }
ok 283 — [1,2,3] is not equal to [1,2,4]
ok 284 — [1, 2, 3] should be equal to { 0: 1, 1: 2, 2: 3 }) - type is different, but their enumerable properties match.

#  PASS  test/allEqual/allEqual.test.js

ok 285 — allEqual is a Function
ok 286 — Truthy numbers
ok 287 — Falsy numbers
ok 288 — Truthy strings
ok 289 — Falsy numbers
ok 290 — Truthy trues
ok 291 — Truthy falses
ok 292 — Falsy trues
ok 293 — Falsy falses

#  PASS  test/isWritableStream/isWritableStream.test.js

ok 294 — isWritableStream is a Function
ok 295 — isWritableStream returns false for read streams
ok 296 — isWritableStream returns true for write streams
ok 297 — isWritableStream returns true for duplex streams
ok 298 — isWritableStream returns false for non-streams

#  PASS  test/isReadableStream/isReadableStream.test.js

ok 299 — isReadableStream is a Function
ok 300 — isReadableStream returns true for read streams
ok 301 — isReadableStream returns false for write streams
ok 302 — isReadableStream returns true for duplex streams
ok 303 — isReadableStream returns false for non-streams

#  PASS  test/randomIntArrayInRange/randomIntArrayInRange.test.js

ok 304 — randomIntArrayInRange is a Function
ok 305 — The returned array contains only integers
ok 306 — The returned array has the proper length
ok 307 — The returned array's values lie between provided lowerLimit and upperLimit (both inclusive).

#  PASS  test/pluralize/pluralize.test.js

ok 308 — pluralize is a Function
ok 309 — Produces the plural of the word
ok 310 — Produces the singular of the word
ok 311 — Produces the plural of the word
ok 312 — Prodices the defined plural of the word
ok 313 — Works with a dictionary
undefined



# Starting...
# 360 test suites found.

#  PASS  test/uniqueElements.test.js

ok 1 — uniqueElements is a Function
ok 2 — uniqueElements([1, 2, 2, 3, 4, 4, 5]) returns [1,2,3,4,5]
ok 3 — uniqueElements([1, 23, 53]) returns [1, 23, 53]
ok 4 — uniqueElements([true, 0, 1, false, false, undefined, null, '']) returns [true, 0, 1, false, false, undefined, null, '']
ok 5 — uniqueElements() returns []
ok 6 — uniqueElements(null) returns []
ok 7 — uniqueElements(undefined) returns []
ok 8 — uniqueElements('strt') returns ['s', 't', 'r']
ok 9 — uniqueElements(1, 1, 2543, 534, 5) throws an error
ok 10 — uniqueElements({}) throws an error
ok 11 — uniqueElements(true) throws an error
ok 12 — uniqueElements(false) throws an error
ok 13 — uniqueElements([true, 0, 1, false, false, undefined, null]) takes less than 2s to run

#  PASS  test/toSnakeCase.test.js

ok 14 — toSnakeCase is a Function
ok 15 — toSnakeCase('camelCase') returns camel_case
ok 16 — toSnakeCase('some text') returns some_text
ok 17 — toSnakeCase('some-mixed_string With spaces_underscores-and-hyphens') returns some_mixed_string_with_spaces_underscores_and_hyphens
ok 18 — toSnakeCase('IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML') returns i_am_listening_to_fm_while_loading_different_url_on_my_browser_and_also_editing_some_xml_and_html
ok 19 — toSnakeCase() returns undefined
ok 20 — toSnakeCase([]) throws an error
ok 21 — toSnakeCase({}) throws an error
ok 22 — toSnakeCase(123) throws an error
ok 23 — toSnakeCase(IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML) takes less than 2s to run

#  PASS  test/toKebabCase.test.js

ok 24 — toKebabCase is a Function
ok 25 — toKebabCase('camelCase') returns camel-case
ok 26 — toKebabCase('some text') returns some-text
ok 27 — toKebabCase('some-mixed-string With spaces-underscores-and-hyphens') returns some-mixed-string-with-spaces-underscores-and-hyphens
ok 28 — toKebabCase('IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML') returns i-am-listening-to-fm-while-loading-different-url-on-my-browser-and-also-editing-some-xml-and-html
ok 29 — toKebabCase() returns undefined
ok 30 — toKebabCase([]) throws an erro
ok 31 — toKebabCase({}) throws an erro
ok 32 — toKebabCase(123) throws an erro
ok 33 — toKebabCase(IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML) takes less than 2s to run

#  PASS  test/toTitleCase.test.js

ok 34 — toTitleCase is a Function
ok 35 — toTitleCase('some_database_field_name') returns Some Database Field Name
ok 36 — toTitleCase('Some label that needs to be titled') returns Some Label That Needs To Be Titled
ok 37 — toTitleCase('some-javaScript-property') return Some Java Script Property
ok 38 — toTitleCase('some-mixed_string with spaces_underscores-and-hyphens') returns Some Mixed String With Spaces Underscores And Hyphens
ok 39 — toTitleCase() throws a error
ok 40 — toTitleCase([]) throws a error
ok 41 — toCamelCase({}) throws a error
ok 42 — toTitleCase(123) throws a error
ok 43 — toTitleCase(some-mixed_string with spaces_underscores-and-hyphens) takes less than 2s to run

#  PASS  test/toCamelCase.test.js

ok 44 — toCamelCase is a Function
ok 45 — toCamelCase('some_database_field_name') returns someDatabaseFieldName
ok 46 — toCamelCase('Some label that needs to be camelized') returns someLabelThatNeedsToBeCamelized
ok 47 — toCamelCase('some-javascript-property') return someJavascriptProperty
ok 48 — toCamelCase('some-mixed_string with spaces_underscores-and-hyphens') returns someMixedStringWithSpacesUnderscoresAndHyphens
ok 49 — toCamelCase() throws a error
ok 50 — toCamelCase([]) throws a error
ok 51 — toCamelCase({}) throws a error
ok 52 — toCamelCase(123) throws a error
ok 53 — toCamelCase(some-mixed_string with spaces_underscores-and-hyphens) takes less than 2s to run

#  PASS  test/is.test.js

ok 54 — is is a Function
ok 55 — Works for arrays with data
ok 56 — Works for empty arrays
ok 57 — Works for arrays, not objects
ok 58 — Works for objects
ok 59 — Works for maps
ok 60 — Works for regular expressions
ok 61 — Works for sets
ok 62 — Works for weak maps
ok 63 — Works for weak sets
ok 64 — Works for strings - returns true for primitive
ok 65 — Works for strings - returns true when using constructor
ok 66 — Works for numbers - returns true for primitive
ok 67 — Works for numbers - returns true when using constructor
ok 68 — Works for booleans - returns true for primitive
ok 69 — Works for booleans - returns true when using constructor
ok 70 — Works for functions

#  PASS  test/average.test.js

ok 71 — average is a Function
ok 72 — average(true) returns 0
ok 73 — average(false) returns 1
ok 74 — average(9, 1) returns 5
ok 75 — average(153, 44, 55, 64, 71, 1122, 322774, 2232, 23423, 234, 3631) returns 32163.909090909092
ok 76 — average(1, 2, 3) returns 2
ok 77 — average(null) returns 0
ok 78 — average(1, 2, 3) returns NaN
ok 79 — average(String) returns NaN
ok 80 — average({ a: 123}) returns NaN
ok 81 — average([undefined, 0, string]) returns NaN
ok 82 — average([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 1122, 32124, 23232]) takes less than 2s to run

#  PASS  test/union.test.js

ok 83 — union is a Function
ok 84 — union([1, 2, 3], [4, 3, 2]) returns [1, 2, 3, 4]
ok 85 — union('str', 'asd') returns [ 's', 't', 'r', 'a', 'd' ]
ok 86 — union([[], {}], [1, 2, 3]) returns [[], {}, 1, 2, 3]
ok 87 — union([], []) returns []
ok 88 — union() throws an error
ok 89 — union(true, 'str') throws an error
ok 90 — union('false', true) throws an error
ok 91 — union((123, {}) throws an error
ok 92 — union([], {}) throws an error
ok 93 — union(undefined, null) throws an error
ok 94 — union([1, 2, 3], [4, 3, 2]) takes less than 2s to run

#  PASS  test/validateNumber.test.js

ok 95 — validateNumber is a Function
ok 96 — validateNumber(9) returns true
ok 97 — validateNumber(234asd.slice(0, 2)) returns true
ok 98 — validateNumber(1232) returns true
ok 99 — validateNumber(1232 + 13423) returns true
ok 100 — validateNumber(1232 * 2342 * 123) returns true
ok 101 — validateNumber(1232.23423536) returns true
ok 102 — validateNumber(234asd) returns false
ok 103 — validateNumber(e234d) returns false
ok 104 — validateNumber(false) returns false
ok 105 — validateNumber(true) returns false
ok 106 — validateNumber(null) returns false
ok 107 — validateNumber(123 * asd) returns false

#  PASS  test/equals.test.js

ok 108 — equals is a Function
ok 109 — { a: [2, {e: 3}], b: [4], c: 'foo' } is equal to { a: [2, {e: 3}], b: [4], c: 'foo' }
ok 110 — [1,2,3] is equal to [1,2,3]
ok 111 — { a: [2, 3], b: [4] } is not equal to { a: [2, 3], b: [6] }
ok 112 — [1,2,3] is not equal to [1,2,4]
ok 113 — [1, 2, 3] should be equal to { 0: 1, 1: 2, 2: 3 }) - type is different, but their enumerable properties match.
ok 114 — Two of the same date are equal
ok 115 — null should not be equal to anything
ok 116 — undefined should not be equal to anything
ok 117 — {a: ""} should not be equal to {a: "", b: ""}

#  PASS  test/toSafeInteger.test.js

ok 118 — toSafeInteger is a Function
ok 119 — Number(toSafeInteger(3.2)) is a number
ok 120 — Converts a value to a safe integer
ok 121 — toSafeInteger('4.2') returns 4
ok 122 — toSafeInteger(4.6) returns 5
ok 123 — toSafeInteger([]) returns 0
ok 124 — isNaN(toSafeInteger([1.5, 3124])) is true
ok 125 — isNaN(toSafeInteger('string')) is true
ok 126 — isNaN(toSafeInteger({})) is true
ok 127 — isNaN(toSafeInteger()) is true
ok 128 — toSafeInteger(Infinity) returns 9007199254740991
ok 129 — toSafeInteger(3.2) takes less than 2s to run

#  PASS  test/isPrimitive.test.js

ok 130 — isPrimitive is a Function
ok 131 — isPrimitive(null) is primitive
ok 132 — isPrimitive(undefined) is primitive
ok 133 — isPrimitive(string) is primitive
ok 134 — isPrimitive(true) is primitive
ok 135 — isPrimitive(50) is primitive
ok 136 — isPrimitive('Hello') is primitive
ok 137 — isPrimitive(false) is primitive
ok 138 — isPrimitive(Symbol()) is primitive
ok 139 — isPrimitive([1, 2, 3]) is not primitive
ok 140 — isPrimitive({ a: 123 }) is not primitive
ok 141 — isPrimitive({ a: 123 }) takes less than 2s to run

#  PASS  test/zipObject.test.js

ok 142 — zipObject is a Function
ok 143 — zipObject([a, b, c], [1, 2]) returns {a: 1, b: 2, c: undefined}
ok 144 — zipObject([a, b], [1, 2, 3]) returns {a: 1, b: 2}
ok 145 — zipObject([a, b, c], string) returns { a: s, b: t, c: r }
ok 146 — zipObject([a], string) returns { a: s }
ok 147 — zipObject() throws an error
ok 148 — zipObject((['string'], null) throws an error
ok 149 — zipObject(null, [1]) throws an error
ok 150 — zipObject('string') throws an error
ok 151 — zipObject('test', 'string') throws an error

#  PASS  test/quickSort.test.js

ok 152 — quickSort is a Function
ok 153 — quickSort([5, 6, 4, 3, 1, 2]) returns [1, 2, 3, 4, 5, 6]
ok 154 — quickSort([-1, 0, -2]) returns [-2, -1, 0]
ok 155 — quickSort() throws an error
ok 156 — quickSort(123) throws an error
ok 157 — quickSort({ 234: string}) throws an error
ok 158 — quickSort(null) throws an error
ok 159 — quickSort(undefined) throws an error
ok 160 — quickSort([11, 1, 324, 23232, -1, 53, 2, 524, 32, 13, 156, 133, 62, 12, 4]) takes less than 2s to run

#  PASS  test/round.test.js

ok 161 — round is a Function
ok 162 — round(1.005, 2) returns 1.01
ok 163 — round(123.3423345345345345344, 11) returns 123.34233453453
ok 164 — round(3.342, 11) returns 3.342
ok 165 — round(1.005) returns 1
ok 166 — round([1.005, 2]) returns NaN
ok 167 — round(string) returns NaN
ok 168 — round() returns NaN
ok 169 — round(132, 413, 4134) returns NaN
ok 170 — round({a: 132}, 413) returns NaN
ok 171 — round(123.3423345345345345344, 11) takes less than 2s to run

#  PASS  test/yesNo.test.js

ok 172 — yesNo is a Function
ok 173 — yesNo(Y) returns true
ok 174 — yesNo(yes) returns true
ok 175 — yesNo(foo, true) returns true
ok 176 — yesNo(No) returns false
ok 177 — yesNo() returns false
ok 178 — yesNo(null) returns false
ok 179 — yesNo(undefined) returns false
ok 180 — yesNo([123, null]) returns false
ok 181 — yesNo([Yes, No]) returns false
ok 182 — yesNo({ 2: Yes }) returns false
ok 183 — yesNo([Yes, No], true) returns true
ok 184 — yesNo({ 2: Yes }, true) returns true

#  PASS  test/isSorted.test.js

ok 185 — isSorted is a Function
ok 186 — Array is sorted in ascending order
ok 187 — Array is sorted in ascending order
ok 188 — Array is sorted in ascending order
ok 189 — Array is sorted in ascending order
ok 190 — Array is sorted in descending order
ok 191 — Array is sorted in descending order
ok 192 — Array is sorted in descending order
ok 193 — Array is sorted in descending order
ok 194 — Array is empty
ok 195 — Array is not sorted, direction changed in array
ok 196 — Array is not sorted, direction changed in array

#  PASS  test/longestItem.test.js

ok 197 — longestItem is a Function
ok 198 — Returns the longest object from plain values
ok 199 — Returns the longest object from a spread array
ok 200 — Returns the longest object from mixed input
ok 201 — Returns the longest array
ok 202 — Returns the longest object when comparing arrays and strings
ok 203 — Returns TypeError without any input
ok 204 — Returns first found of all similar
ok 205 — Throws TypeError if all inputs are undefined

#  PASS  test/words.test.js

ok 206 — words is a Function
ok 207 — words('I love javaScript!!') returns [I, love, javaScript]
ok 208 — words('python, javaScript & coffee') returns [python, javaScript, coffee]
ok 209 — words(I love javaScript!!) returns an array
ok 210 — words() throws an error
ok 211 — words(null) throws an error
ok 212 — words(undefined) throws an error
ok 213 — words({}) throws an error
ok 214 — words([]) throws an error
ok 215 — words(1234) throws an error

#  PASS  test/without.test.js

ok 216 — without is a Function
ok 217 — without([2, 1, 2, 3], 1, 2) returns [3]
ok 218 — without([]) returns []
ok 219 — without([3, 1, true, '3', true], '3', true) returns [3, 1]
ok 220 — without('string'.split(''), 's', 't', 'g') returns ['r', 'i', 'n']
ok 221 — without() throws an error
ok 222 — without(null) throws an error
ok 223 — without(undefined) throws an error
ok 224 — without(123) throws an error
ok 225 — without({}) throws an error

#  PASS  test/chunk.test.js

ok 226 — chunk is a Function
ok 227 — chunk([1, 2, 3, 4, 5], 2) returns [[1,2],[3,4],[5]]
ok 228 — chunk([]) returns []
ok 229 — chunk(123) returns []
ok 230 — chunk({ a: 123}) returns []
ok 231 — chunk(string, 2) returns [ st, ri, ng ]
ok 232 — chunk() throws an error
ok 233 — chunk(undefined) throws an error
ok 234 — chunk(null) throws an error
ok 235 — chunk(This is a string, 2) takes less than 2s to run

#  PASS  test/zip.test.js

ok 236 — zip is a Function
ok 237 — zip([a, b], [1, 2], [true, false]) returns [[a, 1, true], [b, 2, false]]
ok 238 — zip([a], [1, 2], [true, false]) returns [[a, 1, true], [undefined, 2, false]]
ok 239 — zip([]) returns []
ok 240 — zip(123) returns []
ok 241 — zip([a, b], [1, 2], [true, false]) returns an Array
ok 242 — zip([a], [1, 2], [true, false]) returns an Array
ok 243 — zip(null) throws an error
ok 244 — zip(undefined) throws an error

#  PASS  test/uniqueElementsByRight.test.js

ok 245 — uniqueElementsByRight is a Function
ok 246 — uniqueElementsByRight works for properties
ok 247 — uniqueElementsByRight works for nested properties

#  PASS  test/isEmpty.test.js

ok 248 — isEmpty is a Function
ok 249 — Returns true for empty Map
ok 250 — Returns true for empty Set
ok 251 — Returns true for empty array
ok 252 — Returns true for empty object
ok 253 — Returns true for empty string
ok 254 — Returns false for non-empty array
ok 255 — Returns false for non-empty object
ok 256 — Returns false for non-empty string
ok 257 — Returns true - type is not considered a collection
ok 258 — Returns true - type is not considered a collection

#  PASS  test/last.test.js

ok 259 — last is a Function
ok 260 — last({ a: 1234}) returns undefined
ok 261 — last([1, 2, 3]) returns 3
ok 262 — last({ 0: false}) returns undefined
ok 263 — last(String) returns g
ok 264 — last(null) throws an Error
ok 265 — last(undefined) throws an Error
ok 266 — last() throws an Error
ok 267 — last([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 1122, 32124, 23232]) takes less than 2s to run

#  PASS  test/head.test.js

ok 268 — head is a Function
ok 269 — head({ a: 1234}) returns undefined
ok 270 — head([1, 2, 3]) returns 1
ok 271 — head({ 0: false}) returns false
ok 272 — head(String) returns S
ok 273 — head(null) throws an Error
ok 274 — head(undefined) throws an Error
ok 275 — head() throws an Error
ok 276 — head([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 1122, 32124, 23232]) takes less than 2s to run

#  PASS  test/uniqueElementsBy.test.js

ok 277 — uniqueElementsBy is a Function
ok 278 — uniqueElementsBy works for properties
ok 279 — uniqueElementsBy works for nested properties

#  PASS  test/allEqual.test.js

ok 280 — allEqual is a Function
ok 281 — Truthy numbers
ok 282 — Falsy numbers
ok 283 — Truthy strings
ok 284 — Falsy numbers
ok 285 — Truthy trues
ok 286 — Truthy falses
ok 287 — Falsy trues
ok 288 — Falsy falses
ok 289 — False when there are different types

#  PASS  test/filterNonUniqueBy.test.js

ok 290 — filterNonUniqueBy is a Function
ok 291 — filterNonUniqueBy works for properties
ok 292 — filterNonUniqueBy works for nested properties

#  PASS  test/all.test.js

ok 293 — all is a Function
ok 294 — Returns true for arrays with no falsey values
ok 295 — Returns false for arrays with 0
ok 296 — Returns false for arrays with NaN
ok 297 — Returns false for arrays with undefined
ok 298 — Returns false for arrays with null
ok 299 — Returns false for arrays with empty strings
ok 300 — Returns true with predicate function
ok 301 — Returns false with a predicate function

#  PASS  test/offset.test.js

ok 302 — offset is a Function
ok 303 — Offset of 0 returns the same array.
ok 304 — Offset > 0 returns the offsetted array.
ok 305 — Offset < 0 returns the reverse offsetted array.
ok 306 — Offset greater than the length of the array returns the same array.
ok 307 — Offset less than the negative length of the array returns the same array.
ok 308 — Offsetting empty array returns an empty array.

#  PASS  test/off.test.js

ok 309 — off is a Function
ok 310 — off removes an event listener
ok 311 — off removes an event listener

#  PASS  test/pluralize.test.js

ok 312 — pluralize is a Function
ok 313 — Produces the plural of the word
ok 314 — Produces the singular of the word
ok 315 — Produces the plural of the word
ok 316 — Produces the defined plural of the word
ok 317 — Produces the defined plural of the word
ok 318 — Works with a dictionary

#  PASS  test/on.test.js

ok 319 — on is a Function
ok 320 — on creates an event listener
ok 321 — on creates an event listener

#  PASS  test/binomialCoefficient.test.js

ok 322 — binomialCoefficient is a Function
ok 323 — Returns the appropriate value
ok 324 — Returns the appropriate value
ok 325 — Returns the appropriate value
ok 326 — Returns the appropriate value
ok 327 — Returns the appropriate value
ok 328 — Returns NaN
ok 329 — Returns NaN

#  PASS  test/copyToClipboard.test.js

ok 330 — copyToClipboard is a Function
ok 331 — copyToClipboard does not throw errors
ok 332 — copyToClipboard does not throw errors

#  PASS  test/prettyBytes.test.js

ok 333 — prettyBytes is a Function
ok 334 — Converts a number in bytes to a human-readable string.
ok 335 — Converts a number in bytes to a human-readable string.
ok 336 — Converts a number in bytes to a human-readable string.
ok 337 — Converts a number in bytes to a human-readable string.
ok 338 — Converts a number in bytes to a human-readable string.

#  PASS  test/randomIntArrayInRange.test.js

ok 339 — randomIntArrayInRange is a Function
ok 340 — The returned array contains only integers
ok 341 — The returned array has the proper length
ok 342 — The returned array's values lie between provided lowerLimit and upperLimit (both inclusive).

#  PASS  test/getMeridiemSuffixOfInteger.test.js

ok 343 — getMeridiemSuffixOfInteger is a Function
ok 344 — Gets the correct meridiem suffix.
ok 345 — Gets the correct meridiem suffix.
ok 346 — Gets the correct meridiem suffix.
ok 347 — Gets the correct meridiem suffix.
ok 348 — Gets the correct meridiem suffix.

#  PASS  test/sampleSize.test.js

ok 349 — sampleSize is a Function
ok 350 — Returns a single element without n specified
ok 351 — Returns a random sample of specified size from an array
ok 352 — Returns all elements in an array if n >= length
ok 353 — Returns an empty array if original array is empty
ok 354 — Returns an empty array if n = 0

#  PASS  test/getImages.test.js

ok 355 — getImages is a Function
ok 356 — getImages returns an Array
ok 357 — getImages removes duplicates from images Array

#  PASS  test/orderBy.test.js

ok 358 — orderBy is a Function
ok 359 — Returns a sorted array of objects ordered by properties and orders.
ok 360 — Returns a sorted array of objects ordered by properties and orders.

#  PASS  test/deepFreeze.test.js

ok 361 — deepFreeze is a Function
ok 362 — modifying deeply freezed object prop throws an error in strict mode
ok 363 — should not modify deeply freezed object inside another object
ok 364 — should not add prop to deeply freezed empty object

#  PASS  test/CSVToArray.test.js

ok 365 — CSVToArray is a Function
ok 366 — CSVToArray works with default delimiter
ok 367 — CSVToArray works with custom delimiter
ok 368 — CSVToArray omits the first row
ok 369 — CSVToArray omits the first row and works with a custom delimiter

#  PASS  test/initializeArrayWithRangeRight.test.js

ok 370 — initializeArrayWithRangeRight is a Function
ok 371 — Initializes an array containing the numbers in the specified range (witout start value)
ok 372 — Initializes an array containing the numbers in the specified range
ok 373 — Initializes an array containing the numbers in the specified range (with step)

#  PASS  test/sortedLastIndexBy.test.js

ok 374 — sortedLastIndexBy is a Function
ok 375 — Returns the highest index to insert the element without messing up the list order
ok 376 — Returns the highest index to insert the element without messing up the list order
ok 377 — Returns the highest index to insert the element without messing up the list order

#  PASS  test/isWritableStream.test.js

ok 378 — isWritableStream is a Function
ok 379 — isWritableStream returns false for read streams
ok 380 — isWritableStream returns true for write streams
ok 381 — isWritableStream returns true for duplex streams
ok 382 — isWritableStream returns false for non-streams

#  PASS  test/isReadableStream.test.js

ok 383 — isReadableStream is a Function
ok 384 — isReadableStream returns true for read streams
ok 385 — isReadableStream returns false for write streams
ok 386 — isReadableStream returns true for duplex streams
ok 387 — isReadableStream returns false for non-streams

#  PASS  test/fahrenheitToCelsius.test.js

ok 388 — fahrenheitToCelsius is a Function
ok 389 — 32 Fahrenheit is 0 Celsius
ok 390 — 212 Fahrenheit is 100 Celsius
ok 391 — 150 Fahrenheit is 65.55555555555556 Celsius
ok 392 — 1000 Fahrenheit is 537.7777777777778
ok 393 — Not a number value is NaN

#  PASS  test/inRange.test.js

ok 394 — inRange is a Function
ok 395 — The given number falls within the given range
ok 396 — The given number falls within the given range (reverse)
ok 397 — The given number falls within the given range
ok 398 — The given number does not falls within the given range
ok 399 — The given number does not falls within the given range

#  PASS  test/any.test.js

ok 400 — any is a Function
ok 401 — Returns true for arrays with at least one truthy value
ok 402 — Returns false for arrays with no truthy values
ok 403 — Returns false for arrays with no truthy values
ok 404 — Returns true with predicate function
ok 405 — Returns false with a predicate function

#  PASS  test/randomIntegerInRange.test.js

ok 406 — randomIntegerInRange is a Function
ok 407 — The returned value is an integer
ok 408 — The returned value lies between provided lowerLimit and upperLimit (both inclusive).

#  PASS  test/initializeArrayWithRange.test.js

ok 409 — initializeArrayWithRange is a Function
ok 410 — Initializes an array containing the numbers in the specified range (witout start value)
ok 411 — Initializes an array containing the numbers in the specified range
ok 412 — Initializes an array containing the numbers in the specified range (with step)

#  PASS  test/sortedIndexBy.test.js

ok 413 — sortedIndexBy is a Function
ok 414 — Returns the lowest index to insert the element without messing up the list order
ok 415 — Returns the lowest index to insert the element without messing up the list order
ok 416 — Returns the lowest index to insert the element without messing up the list order

#  PASS  test/formatDuration.test.js

ok 417 — formatDuration is a Function
ok 418 — Returns the human readable format of the given number of milliseconds
ok 419 — Returns the human readable format of the given number of milliseconds (negative)
ok 420 — Returns the human readable format of the given number of milliseconds

#  PASS  test/randomNumberInRange.test.js

ok 421 — randomNumberInRange is a Function
ok 422 — The returned value is a number
ok 423 — The returned value lies between provided lowerLimit and upperLimit (both inclusive).

#  PASS  test/isDuplexStream.test.js

ok 424 — isDuplexStream is a Function
ok 425 — isDuplexStream returns false for read streams
ok 426 — isDuplexStream returns false for write streams
ok 427 — isDuplexStream returns true for duplex streams
ok 428 — isDuplexStream returns false for non-streams

#  PASS  test/join.test.js

ok 429 — join is a Function
ok 430 — Joins all elements of an array into a string and returns this string
ok 431 — Joins all elements of an array into a string and returns this string
ok 432 — Joins all elements of an array into a string and returns this string

#  PASS  test/toCurrency.test.js

ok 433 — toCurrency is a Function
ok 434 — currency: Euro | currencyLangFormat: Local
ok 435 —  currency: US Dollar | currencyLangFormat: English (United States)
ok 436 — currency: Japanese Yen | currencyLangFormat: Local

#  PASS  test/mapObject.test.js

ok 437 — mapObject is a Function
ok 438 — mapObject([1, 2, 3], a => a * a) returns { 1: 1, 2: 4, 3: 9 }
ok 439 — mapObject([1, 2, 3, 4], (a, b) => b - a) returns { 1: -1, 2: -1, 3: -1, 4: -1 }
ok 440 — mapObject([1, 2, 3, 4], (a, b) => a - b) returns { 1: 1, 2: 1, 3: 1, 4: 1 }

#  PASS  test/factorial.test.js

ok 441 — factorial is a Function
ok 442 — Calculates the factorial of 720
ok 443 — Calculates the factorial of 0
ok 444 — Calculates the factorial of 1
ok 445 — Calculates the factorial of 4
ok 446 — Calculates the factorial of 10
ok 447 — Throws TypeError if n < 0

#  PASS  test/sortedIndex.test.js

ok 448 — sortedIndex is a Function
ok 449 — Returns the lowest index at which value should be inserted into array in order to maintain its sort order.
ok 450 — Returns the lowest index at which value should be inserted into array in order to maintain its sort order.
ok 451 — Returns the lowest index at which value should be inserted into array in order to maintain its sort order.

#  PASS  test/geometricProgression.test.js

ok 452 — geometricProgression is a Function
ok 453 — Initializes an array containing the numbers in the specified range
ok 454 — Initializes an array containing the numbers in the specified range
ok 455 — Initializes an array containing the numbers in the specified range

#  PASS  test/celsiusToFahrenheit.test.js

ok 456 — celsiusToFahrenheit is a Function
ok 457 — 0 Celsius is 32 Fahrenheit
ok 458 — 100 Celsius is 212 Fahrenheit
ok 459 — -50 Celsius is -58 Fahrenheit
ok 460 — 1000 Celsius is 1832 Fahrenheit
ok 461 — Not a number value is NaN

#  PASS  test/mapString.test.js

ok 462 — mapString is a Function
ok 463 — mapString returns a capitalized string
ok 464 — mapString can deal with indexes
ok 465 — mapString can deal with the full string

#  PASS  test/dig.test.js

ok 466 — dig is a Function
ok 467 — Dig target success
ok 468 — Dig target with falsey value
ok 469 — Dig target with array
ok 470 — Unknown target return undefined

#  PASS  test/levenshteinDistance.test.js

ok 471 — levenshteinDistance is a Function
ok 472 — levenshteinDistance returns the correct results
ok 473 — levenshteinDistance returns the correct result for 0-length string as first argument
ok 474 — levenshteinDistance returns the correct result for 0-length string as second argument

#  PASS  test/sortedLastIndex.test.js

ok 475 — sortedLastIndex is a Function
ok 476 — Returns the highest index to insert the element without messing up the list order
ok 477 — Returns the highest index to insert the element without messing up the list order
ok 478 — Returns the highest index to insert the element without messing up the list order

#  PASS  test/reduceWhich.test.js

ok 479 — reduceWhich is a Function
ok 480 — Returns the minimum of an array
ok 481 — Returns the maximum of an array
ok 482 — Returns the object with the minimum specified value in an array

#  PASS  test/getScrollPosition.test.js

ok 483 — getScrollPosition is a Function
ok 484 — getScrollPosition returns an object with x and y values
ok 485 — getScrollPosition returns an object with x and y values

#  PASS  test/isStream.test.js

ok 486 — isStream is a Function
ok 487 — isStream returns true for read streams
ok 488 — isStream returns true for write streams
ok 489 — isStream returns true for duplex streams
ok 490 — isStream returns false for non-streams

#  PASS  test/factors.test.js

ok 491 — factors is a Function
ok 492 — factors returns the correct array
ok 493 — factors returns the correct array of primes
ok 494 — factors returns the correct array for negatives
ok 495 — factors returns the correct array of primes for negatives

#  PASS  test/uncurry.test.js

ok 496 — uncurry is a Function
ok 497 — Works without a provided value for n
ok 498 — Works with n = 2
ok 499 — Works with n = 3
ok 500 — Throws RangeError if arguments are too few

#  PASS  test/invertKeyValues.test.js

ok 501 — invertKeyValues is a Function
ok 502 — invertKeyValues({ a: 1, b: 2, c: 1 }) returns { 1: [ 'a', 'c' ], 2: [ 'b' ] }
ok 503 — invertKeyValues({ a: 1, b: 2, c: 1 }, value => 'group' + value) returns { group1: [ 'a', 'c' ], group2: [ 'b' ] }

#  PASS  test/fromCamelCase.test.js

ok 504 — fromCamelCase is a Function
ok 505 — Converts a string from camelcase
ok 506 — Converts a string from camelcase
ok 507 — Converts a string from camelcase

#  PASS  test/shank.test.js

ok 508 — shank is a Function
ok 509 — Returns an array with the added elements.
ok 510 — Returns an array with the removed elements.
ok 511 — Does not mutate the original array

#  PASS  test/approximatelyEqual.test.js

ok 512 — approximatelyEqual is a Function
ok 513 — Works for PI / 2
ok 514 — Works for 0.1 + 0.2 === 0.3
ok 515 — Works for exactly equal values
ok 516 — Works for a custom epsilon

#  PASS  test/none.test.js

ok 517 — none is a Function
ok 518 — Returns true for arrays with no truthy values
ok 519 — Returns false for arrays with at least one truthy value
ok 520 — Returns true with a predicate function
ok 521 — Returns false with predicate function

#  PASS  test/nest.test.js

ok 522 — nest is a Function
ok 523 — Nests items

#  PASS  test/castArray.test.js

ok 524 — castArray is a Function
ok 525 — Works for single values
ok 526 — Works for arrays with one value
ok 527 — Works for arrays with multiple value
ok 528 — Works for strings
ok 529 — Works for objects

#  PASS  test/nthElement.test.js

ok 530 — nthElement is a Function
ok 531 — Returns the nth element of an array.
ok 532 — Returns the nth element of an array.
ok 533 — Returns the nth element of an array.
ok 534 — Returns the nth element of an array.

#  PASS  test/binarySearch.test.js

ok 535 — binarySearch is a Function
ok 536 — Finds item in array
ok 537 — Returns -1 when not found
ok 538 — Works with empty arrays
ok 539 — Works for one element arrays

#  PASS  test/mask.test.js

ok 540 — mask is a Function
ok 541 — Replaces all but the last num of characters with the specified mask character
ok 542 — Replaces all but the last num of characters with the specified mask character
ok 543 — Replaces all but the last num of characters with the specified mask character

#  PASS  test/randomHexColorCode.test.js

ok 544 — randomHexColorCode is a Function
ok 545 — randomHexColorCode has to proper length
ok 546 — The color code starts with "#"
ok 547 — The color code contains only valid hex-digits

#  PASS  test/createEventHub.test.js

ok 548 — createEventHub is a Function
ok 549 — createEventHub returns an object

#  PASS  test/howManyTimes.test.js

ok 550 — howManyTimes is a Function
ok 551 — howManyTimes returns the correct result
ok 552 — howManyTimes returns the correct result
ok 553 — howManyTimes returns the correct result
ok 554 — howManyTimes returns the correct result

#  PASS  test/JSONtoCSV.test.js

ok 555 — JSONtoCSV is a Function
ok 556 — JSONtoCSV works with default delimiter
ok 557 — JSONtoCSV works with custom delimiter

#  PASS  test/converge.test.js

ok 558 — converge is a Function
ok 559 — Produces the average of the array
ok 560 — Produces the strange concatenation

#  PASS  test/capitalize.test.js

ok 561 — capitalize is a Function
ok 562 — Capitalizes the first letter of a string
ok 563 — Capitalizes the first letter of a string
ok 564 — Works with characters
ok 565 — "Works with single character words

#  PASS  test/toOrdinalSuffix.test.js

ok 566 — toOrdinalSuffix is a Function
ok 567 — Adds an ordinal suffix to a number
ok 568 — Adds an ordinal suffix to a number
ok 569 — Adds an ordinal suffix to a number
ok 570 — Adds an ordinal suffix to a number

#  PASS  test/deepClone.test.js

ok 571 — deepClone is a Function
ok 572 — Shallow cloning works
ok 573 — Deep cloning works
ok 574 — Array shallow cloning works
ok 575 — Array deep cloning works

#  PASS  test/isAnagram.test.js

ok 576 — isAnagram is a Function
ok 577 — Checks valid anagram
ok 578 — Works with spaces
ok 579 — Ignores case
ok 580 — Ignores special characters

#  PASS  test/tomorrow.test.js

ok 581 — tomorrow is a Function
ok 582 — Returns the correct year
ok 583 — Returns the correct month
ok 584 — Returns the correct date

#  PASS  test/elementIsVisibleInViewport.test.js

ok 585 — elementIsVisibleInViewport is a Function
ok 586 — elementIsVisibleInViewport returns a boolean
ok 587 — elementIsVisibleInViewport returns a boolean

#  PASS  test/shuffle.test.js

ok 588 — shuffle is a Function
ok 589 — Shuffles the array
ok 590 — New array contains all original elements
ok 591 — Works for empty arrays
ok 592 — Works for single-element arrays

#  PASS  test/memoize.test.js

ok 593 — memoize is a Function
ok 594 — Function works properly
ok 595 — Function works properly
ok 596 — Function works properly, cache stores values (coverage)
ok 597 — Cache stores values

#  PASS  test/elementContains.test.js

ok 598 — elementContains is a Function
ok 599 — elementContains returns true
ok 600 — elementContains returns false

#  PASS  test/isString.test.js

ok 601 — isString is a Function
ok 602 — foo is a string
ok 603 — "10" is a string
ok 604 — Empty string is a string
ok 605 — 10 is not a string
ok 606 — true is not string

#  PASS  test/dropRight.test.js

ok 607 — dropRight is a Function
ok 608 — Returns a new array with n elements removed from the right
ok 609 — Returns a new array with n elements removed from the right
ok 610 — Returns a new array with n elements removed from the right

#  PASS  test/hexToRGB.test.js

ok 611 — hexToRGB is a Function
ok 612 — Converts a color code to a rgb() or rgba() string
ok 613 — Converts a color code to a rgb() or rgba() string
ok 614 — Converts a color code to a rgb() or rgba() string

#  PASS  test/partition.test.js

ok 615 — partition is a Function
ok 616 — Groups the elements into two arrays, depending on the provided function's truthiness for each element.

#  PASS  test/stringPermutations.test.js

ok 617 — stringPermutations is a Function
ok 618 — Generates all stringPermutations of a string
ok 619 — Works for single-letter strings
ok 620 — Works for empty strings

#  PASS  test/sumPower.test.js

ok 621 — sumPower is a Function
ok 622 — Returns the sum of the powers of all the numbers from start to end
ok 623 — Returns the sum of the powers of all the numbers from start to end
ok 624 — Returns the sum of the powers of all the numbers from start to end

#  PASS  test/isObjectLike.test.js

ok 625 — isObjectLike is a Function
ok 626 — Returns true for an object
ok 627 — Returns true for an array
ok 628 — Returns false for a function
ok 629 — Returns false for null

#  PASS  test/untildify.test.js

ok 630 — untildify is a Function
ok 631 — Contains no tildes
ok 632 — Does not alter the rest of the path
ok 633 — Does not alter paths without tildes

#  PASS  test/isPromiseLike.test.js

ok 634 — isPromiseLike is a Function
ok 635 — Returns true for a promise-like object
ok 636 — Returns false for an empty object
ok 637 — Returns false for a normal function

#  PASS  test/isObject.test.js

ok 638 — isObject is a Function
ok 639 — isObject([1, 2, 3, 4]) is a object
ok 640 — isObject([]) is a object
ok 641 — isObject({ a:1 }) is a object
ok 642 — isObject(true) is not a object

#  PASS  test/standardDeviation.test.js

ok 643 — standardDeviation is a Function
ok 644 — Returns the standard deviation of an array of numbers
ok 645 — Returns the standard deviation of an array of numbers

#  PASS  test/functionName.test.js

ok 646 — functionName is a Function
ok 647 — Works for native functions
ok 648 — Works for normal functions
ok 649 — Works for arrow functions

#  PASS  test/capitalizeEveryWord.test.js

ok 650 — capitalizeEveryWord is a Function
ok 651 — Capitalizes the first letter of every word in a string
ok 652 — Works with characters
ok 653 — Works with one word string

#  PASS  test/unzip.test.js

ok 654 — unzip is a Function
ok 655 — unzip([['a', 1, true], ['b', 2, false]]) equals [['a','b'], [1, 2], [true, false]]
ok 656 — unzip([['a', 1, true], ['b', 2]]) equals [['a','b'], [1, 2], [true]]

#  PASS  test/take.test.js

ok 657 — take is a Function
ok 658 — Returns an array with n elements removed from the beginning.
ok 659 — Returns an array with n elements removed from the beginning.
ok 660 — Returns an array with n elements removed from the beginning.

#  PASS  test/URLJoin.test.js

ok 661 — URLJoin is a Function
ok 662 — Returns proper URL
ok 663 — Returns proper URL

#  PASS  test/CSVToJSON.test.js

ok 664 — CSVToJSON is a Function
ok 665 — CSVToJSON works with default delimiter
ok 666 — CSVToJSON works with custom delimiter

#  PASS  test/reducedFilter.test.js

ok 667 — reducedFilter is a Function
ok 668 — Filter an array of objects based on a condition while also filtering out unspecified keys.

#  PASS  test/byteSize.test.js

ok 669 — byteSize is a Function
ok 670 — Works for a single letter
ok 671 — Works for a common string
ok 672 — Works for emoji

#  PASS  test/matches.test.js

ok 673 — matches is a Function
ok 674 — Matches returns true for two similar objects
ok 675 — Matches returns false for two non-similar objects

#  PASS  test/pad.test.js

ok 676 — pad is a Function
ok 677 — cat is padded on both sides
ok 678 — length of string is 8
ok 679 — pads 42 with "0"
ok 680 — does not truncates if string exceeds length

#  PASS  test/initializeArrayWithValues.test.js

ok 681 — initializeArrayWithValues is a Function
ok 682 — Initializes and fills an array with the specified values
ok 683 — Initializes and fills an array with the specified values (no fill)

#  PASS  test/isAbsoluteURL.test.js

ok 684 — isAbsoluteURL is a Function
ok 685 — Given string is an absolute URL
ok 686 — Given string is an absolute URL
ok 687 — Given string is not an absolute URL

#  PASS  test/collectInto.test.js

ok 688 — collectInto is a Function
ok 689 — Works with multiple promises

#  PASS  test/isValidJSON.test.js

ok 690 — isValidJSON is a Function
ok 691 — {"name":"Adam","age":20} is a valid JSON
ok 692 — {"name":"Adam",age:"20"} is not a valid JSON
ok 693 — null is a valid JSON

#  PASS  test/groupBy.test.js

ok 694 — groupBy is a Function
ok 695 — Groups the elements of an array based on the given function
ok 696 — Groups the elements of an array based on the given function

#  PASS  test/uniqueSymmetricDifference.test.js

ok 697 — uniqueSymmetricDifference is a Function
ok 698 — Returns the symmetric difference between two arrays.
ok 699 — Does not return duplicates from one array

#  PASS  test/symmetricDifferenceWith.test.js

ok 700 — symmetricDifferenceWith is a Function
ok 701 — Returns the symmetric difference between two arrays, using a provided function as a comparator

#  PASS  test/initialize2DArray.test.js

ok 702 — initialize2DArray is a Function
ok 703 — Initializes a 2D array of given width and height and value
ok 704 — Initializes a 2D array of given width and height and value (no fill)

#  PASS  test/lowercaseKeys.test.js

ok 705 — lowercaseKeys is a Function
ok 706 — Lowercases object keys
ok 707 — Does not mutate original object

#  PASS  test/collatz.test.js

ok 708 — collatz is a Function
ok 709 — When n is even, divide by 2
ok 710 — When n is odd, times by 3 and add 1
ok 711 — Eventually reaches 1

#  PASS  test/reject.test.js

ok 712 — reject is a Function
ok 713 — Works with numbers
ok 714 — Works with strings

#  PASS  test/matchesWith.test.js

ok 715 — matchesWith is a Function
ok 716 — Returns true for two objects with similar values, based on the provided function

#  PASS  test/permutations.test.js

ok 717 — permutations is a Function
ok 718 — Generates all permutations of an array
ok 719 — Generates all permutations of an array

#  PASS  test/zipWith.test.js

ok 720 — zipWith is a Function
ok 721 — zipWith returns the correct results
ok 722 — zipWith returns the correct results if no function is passed

#  PASS  test/luhnCheck.test.js

ok 723 — luhnCheck is a Function
ok 724 — validates identification number
ok 725 — validates identification number
ok 726 — validates identification number

#  PASS  test/nthArg.test.js

ok 727 — nthArg is a Function
ok 728 — Returns the nth argument
ok 729 — Returns undefined if arguments too few
ok 730 — Works for negative values

#  PASS  test/sample.test.js

ok 731 — sample is a Function
ok 732 — Returns a random element from the array
ok 733 — Works for single-element arrays
ok 734 — Returns undefined for empty array

#  PASS  test/UUIDGeneratorNode.test.js

ok 735 — UUIDGeneratorNode is a Function
ok 736 — Contains dashes in the proper places
ok 737 — Only contains hexadecimal digits

#  PASS  test/drop.test.js

ok 738 — drop is a Function
ok 739 — Works without the last argument
ok 740 — Removes appropriate element count as specified
ok 741 — Empties array given a count greater than length

#  PASS  test/isBeforeDate.test.js

ok 742 — isBeforeDate is a Function
ok 743 — isBeforeDate produces the correct result
ok 744 — isBeforeDate produces the correct result

#  PASS  test/median.test.js

ok 745 — median is a Function
ok 746 — Returns the median of an array of numbers
ok 747 — Returns the median of an array of numbers
ok 748 — Returns the median of an array of numbers

#  PASS  test/symmetricDifference.test.js

ok 749 — symmetricDifference is a Function
ok 750 — Returns the symmetric difference between two arrays.
ok 751 — Returns duplicates from one array

#  PASS  test/flattenObject.test.js

ok 752 — flattenObject is a Function
ok 753 — Flattens an object with the paths for keys
ok 754 — Works with arrays

#  PASS  test/intersectionWith.test.js

ok 755 — intersectionWith is a Function
ok 756 — Returns a list of elements that exist in both arrays, using a provided comparator function

#  PASS  test/elo.test.js

ok 757 — elo is a Function
ok 758 — Standard 1v1s
ok 759 — Standard 1v1s
ok 760 — 4 player FFA, all same rank

#  PASS  test/functions.test.js

ok 761 — functions is a Function
ok 762 — Returns own methods
ok 763 — Returns own and inherited methods

#  PASS  test/isAfterDate.test.js

ok 764 — isAfterDate is a Function
ok 765 — isAfterDate produces the correct result
ok 766 — isBeforeDate produces the correct result

#  PASS  test/differenceBy.test.js

ok 767 — differenceBy is a Function
ok 768 — Works using a native function and numbers
ok 769 — Works with arrow function and objects

#  PASS  test/pipeAsyncFunctions.test.js

ok 770 — pipeAsyncFunctions is a Function
ok 771 — pipeAsyncFunctions result should be 15

#  PASS  test/renameKeys.test.js

ok 772 — renameKeys is a Function
ok 773 — renameKeys is a Function

#  PASS  test/isSameDate.test.js

ok 774 — isSameDate is a Function
ok 775 — isSameDate produces the correct result
ok 776 — isSameDate produces the correct result

#  PASS  test/averageBy.test.js

ok 777 — averageBy is a Function
ok 778 — Produces the right result with a function
ok 779 — Produces the right result with a property name

#  PASS  test/isLowerCase.test.js

ok 780 — isLowerCase is a Function
ok 781 — passed string is a lowercase
ok 782 — passed string is a lowercase
ok 783 — passed value is not a lowercase

#  PASS  test/initializeNDArray.test.js

ok 784 — initializeNDArray is a Function
ok 785 — Initializes a n-D array with given data
ok 786 — Initializes a n-D array with given data

#  PASS  test/getType.test.js

ok 787 — getType is a Function
ok 788 — Returns the native type of a value
ok 789 — Returns null for null
ok 790 — Returns undefined for undefined

#  PASS  test/findLastKey.test.js

ok 791 — findLastKey is a Function
ok 792 — eturns the appropriate key

#  PASS  test/arrayToCSV.test.js

ok 793 — arrayToCSV is a Function
ok 794 — arrayToCSV works with default delimiter
ok 795 — arrayToCSV works with custom delimiter

#  PASS  test/bindKey.test.js

ok 796 — bindKey is a Function
ok 797 — Binds function to an object context

#  PASS  test/promisify.test.js

ok 798 — promisify is a Function
ok 799 — Returns a promise
ok 800 — Runs the function provided

#  PASS  test/isArrayLike.test.js

ok 801 — isArrayLike is a Function
ok 802 — Returns true for a string
ok 803 — Returns true for an array
ok 804 — Returns false for null

#  PASS  test/takeWhile.test.js

ok 805 — takeWhile is a Function
ok 806 — Removes elements until the function returns true
ok 807 — Removes elements until the function returns true

#  PASS  test/maxBy.test.js

ok 808 — maxBy is a Function
ok 809 — Produces the right result with a function
ok 810 — Produces the right result with a property name

#  PASS  test/minBy.test.js

ok 811 — minBy is a Function
ok 812 — Produces the right result with a function
ok 813 — Produces the right result with a property name

#  PASS  test/symmetricDifferenceBy.test.js

ok 814 — symmetricDifferenceBy is a Function
ok 815 — Returns the symmetric difference between two arrays, after applying the provided function to each array element of both

#  PASS  test/isUpperCase.test.js

ok 816 — isUpperCase is a Function
ok 817 — ABC is all upper case
ok 818 — abc is not all upper case
ok 819 — A3@$ is all uppercase

#  PASS  test/mostPerformant.test.js

ok 820 — mostPerformant is a Function
ok 821 — mostPerformant returns a number
ok 822 — mostPerformant returns a number

#  PASS  test/unzipWith.test.js

ok 823 — unzipWith is a Function
ok 824 — unzipWith([[1, 10, 100], [2, 20, 200]], (...args) => args.reduce((acc, v) => acc + v, 0)) equals [3, 30, 300]

#  PASS  test/truthCheckCollection.test.js

ok 825 — truthCheckCollection is a Function
ok 826 — second argument is truthy on all elements of a collection

#  PASS  test/pullAtValue.test.js

ok 827 — pullAtValue is a Function
ok 828 — Pulls the specified values
ok 829 — Pulls the specified values

#  PASS  test/findKey.test.js

ok 830 — findKey is a Function
ok 831 — Returns the appropriate key

#  PASS  test/counter.test.js

ok 832 — counter is a Function
ok 833 — counter does not throw errors

#  PASS  test/merge.test.js

ok 834 — merge is a Function
ok 835 — Merges two objects

#  PASS  test/bind.test.js

ok 836 — bind is a Function
ok 837 — Binds to an object context

#  PASS  test/triggerEvent.test.js

ok 838 — triggerEvent is a Function
ok 839 — triggerEvent triggers an event

#  PASS  test/pullAtIndex.test.js

ok 840 — pullAtIndex is a Function
ok 841 — Pulls the given values
ok 842 — Pulls the given values

#  PASS  test/indentString.test.js

ok 843 — indentString is a Function
ok 844 — indentString is a Function
ok 845 — indentString is a Function

#  PASS  test/takeRight.test.js

ok 846 — takeRight is a Function
ok 847 — Returns an array with n elements removed from the end
ok 848 — Returns an array with n elements removed from the end

#  PASS  test/transform.test.js

ok 849 — transform is a Function
ok 850 — Transforms an object

#  PASS  test/gcd.test.js

ok 851 — gcd is a Function
ok 852 — Calculates the greatest common divisor between two or more numbers/arrays
ok 853 — Calculates the greatest common divisor between two or more numbers/arrays

#  PASS  test/toHash.test.js

ok 854 — toHash is a Function
ok 855 — toHash works properly with indexes
ok 856 — toHash works properly with keys

#  PASS  test/isTravisCI.test.js

ok 857 — isTravisCI is a Function
ok 858 — Running on Travis, correctly evaluates

#  PASS  test/isNil.test.js

ok 859 — isNil is a Function
ok 860 — Returns true for null
ok 861 — Returns true for undefined
ok 862 — Returns false for an empty string

#  PASS  test/coalesceFactory.test.js

ok 863 — coalesceFactory is a Function
ok 864 — Returns a customized coalesce function

#  PASS  test/indexOfAll.test.js

ok 865 — indexOfAll is a Function
ok 866 — Returns all indices of val in an array
ok 867 — When val is not found, return an empty array

#  PASS  test/extendHex.test.js

ok 868 — extendHex is a Function
ok 869 — Extends a 3-digit color code to a 6-digit color code
ok 870 — Extends a 3-digit color code to a 6-digit color code

#  PASS  test/isPlainObject.test.js

ok 871 — isPlainObject is a Function
ok 872 — Returns true for a plain object
ok 873 — Returns false for a Map (example of non-plain object)

#  PASS  test/maxDate.test.js

ok 874 — maxDate is a Function
ok 875 — maxDate produces the maximum date

#  PASS  test/intersectionBy.test.js

ok 876 — intersectionBy is a Function
ok 877 — Returns a list of elements that exist in both arrays, after applying the provided function to each array element of both

#  PASS  test/minDate.test.js

ok 878 — minDate is a Function
ok 879 — minDate produces the maximum date

#  PASS  test/getURLParameters.test.js

ok 880 — getURLParameters is a Function
ok 881 — Returns an object containing the parameters of the current URL

#  PASS  test/pipeFunctions.test.js

ok 882 — pipeFunctions is a Function
ok 883 — Performs left-to-right function composition

#  PASS  test/reduceSuccessive.test.js

ok 884 — reduceSuccessive is a Function
ok 885 — Returns the array of successively reduced values

#  PASS  test/sumBy.test.js

ok 886 — sumBy is a Function
ok 887 — Works with a callback.
ok 888 — Works with a property name.

#  PASS  test/chainAsync.test.js

ok 889 — chainAsync is a Function
ok 890 — Calls all functions in an array

#  PASS  test/countBy.test.js

ok 891 — countBy is a Function
ok 892 — Works for functions
ok 893 — Works for property names

#  PASS  test/insertBefore.test.js

ok 894 — insertBefore is a Function
ok 895 — Does not throw error if the element exists

#  PASS  test/cleanObj.test.js

ok 896 — cleanObj is a Function
ok 897 — Removes any properties except the ones specified from a JSON object

#  PASS  test/runPromisesInSeries.test.js

ok 898 — runPromisesInSeries is a Function
ok 899 — Runs promises in series

#  PASS  test/overArgs.test.js

ok 900 — overArgs is a Function
ok 901 — Invokes the provided function with its arguments transformed

#  PASS  test/insertAfter.test.js

ok 902 — insertAfter is a Function
ok 903 — Does not throw error if the element exists

#  PASS  test/once.test.js

ok 904 — once is a Function
ok 905 — once returns Function
ok 906 — once returns the result only once

#  PASS  test/hashNode.test.js

ok 907 — hashNode is a Function
ok 908 — Produces the appropriate hash

#  PASS  test/spreadOver.test.js

ok 909 — spreadOver is a Function
ok 910 — Takes a variadic function and returns a closure that accepts an array of arguments to map to the inputs of the function.

#  PASS  test/decapitalize.test.js

ok 911 — decapitalize is a Function
ok 912 — Works with default parameter
ok 913 — Works with second parameter set to true

#  PASS  test/minN.test.js

ok 914 — minN is a Function
ok 915 — Returns the n minimum elements from the provided array
ok 916 — Returns the n minimum elements from the provided array

#  PASS  test/maxN.test.js

ok 917 — maxN is a Function
ok 918 — Returns the n maximum elements from the provided array
ok 919 — Returns the n maximum elements from the provided array

#  PASS  test/shallowClone.test.js

ok 920 — shallowClone is a Function
ok 921 — Shallow cloning works
ok 922 — Does not clone deeply

#  PASS  test/isArmstrongNumber.test.js

ok 923 — isArmstrongNumber is a Function
ok 924 — isArmstrongNumber returns true
ok 925 — isArmstrongNumber returns false

#  PASS  test/when.test.js

ok 926 — when is a Function
ok 927 — Returns the proper result
ok 928 — Returns the proper result

#  PASS  test/flatten.test.js

ok 929 — flatten is a Function
ok 930 — Flattens an array
ok 931 — Flattens an array

#  PASS  test/partialRight.test.js

ok 932 — partialRight is a Function
ok 933 — Appends arguments

#  PASS  test/toggleClass.test.js

ok 934 — toggleClass is a Function
ok 935 — toggleClass toggles the class

#  PASS  test/composeRight.test.js

ok 936 — composeRight is a Function
ok 937 — Performs left-to-right function composition

#  PASS  test/compose.test.js

ok 938 — compose is a Function
ok 939 — Performs right-to-left function composition

#  PASS  test/lcm.test.js

ok 940 — lcm is a Function
ok 941 — Returns the least common multiple of two or more numbers.
ok 942 — Returns the least common multiple of two or more numbers.

#  PASS  test/splitLines.test.js

ok 943 — splitLines is a Function
ok 944 — Splits a multiline string into an array of lines.

#  PASS  test/solveRPN.test.js

ok 945 — solveRPN is a Function
ok 946 — solveRPN returns the correct result
ok 947 — solveRPN returns the correct result

#  PASS  test/percentile.test.js

ok 948 — percentile is a Function
ok 949 — Uses the percentile formula to calculate how many numbers in the given array are less or equal to the given value.

#  PASS  test/httpDelete.test.js

ok 950 — httpDelete is a Function
ok 951 — httpDelete does not throw errors

#  PASS  test/getDaysDiffBetweenDates.test.js

ok 952 — getDaysDiffBetweenDates is a Function
ok 953 — Returns the difference in days between two dates

#  PASS  test/differenceWith.test.js

ok 954 — differenceWith is a Function
ok 955 — Filters out all values from an array

#  PASS  test/countVowels.test.js

ok 956 — countVowels is a Function
ok 957 — countVowels returns the correct count
ok 958 — countVowels returns the correct count

#  PASS  test/partial.test.js

ok 959 — partial is a Function
ok 960 — Prepends arguments

#  PASS  test/size.test.js

ok 961 — size is a Function
ok 962 — Get size of arrays, objects or strings.
ok 963 — Get size of arrays, objects or strings.

#  PASS  test/mapValues.test.js

ok 964 — mapValues is a Function
ok 965 — Maps values

#  PASS  test/unionWith.test.js

ok 966 — unionWith is a Function
ok 967 — Produces the appropriate results

#  PASS  test/palindrome.test.js

ok 968 — palindrome is a Function
ok 969 — Given string is a palindrome
ok 970 — Given string is not a palindrome

#  PASS  test/bindAll.test.js

ok 971 — bindAll is a Function
ok 972 — Binds to an object context

#  PASS  test/bifurcate.test.js

ok 973 — bifurcate is a Function
ok 974 — Splits the collection into two groups

#  PASS  test/bifurcateBy.test.js

ok 975 — bifurcateBy is a Function
ok 976 — Splits the collection into two groups

#  PASS  test/getColonTimeFromDate.test.js

ok 977 — getColonTimeFromDate is a Function
ok 978 — Gets the time in the proper format.

#  PASS  test/attempt.test.js

ok 979 — attempt is a Function
ok 980 — Returns a value
ok 981 — Returns an error

#  PASS  test/degreesToRads.test.js

ok 982 — degreesToRads is a Function
ok 983 — Returns the appropriate value

#  PASS  test/rearg.test.js

ok 984 — rearg is a Function
ok 985 — Reorders arguments in invoked function

#  PASS  test/getStyle.test.js

ok 986 — getStyle is a Function
ok 987 — getStyle returns the proper value

#  PASS  test/httpPost.test.js

ok 988 — httpPost is a Function
ok 989 — httpPost does not throw errors

#  PASS  test/forOwnRight.test.js

ok 990 — forOwnRight is a Function
ok 991 — Iterates over an element's key-value pairs in reverse

#  PASS  test/pickBy.test.js

ok 992 — pickBy is a Function
ok 993 — Creates an object composed of the properties the given function returns truthy for.

#  PASS  test/flip.test.js

ok 994 — flip is a Function
ok 995 — Flips argument order

#  PASS  test/httpPut.test.js

ok 996 — httpPut is a Function
ok 997 — httpPut does not throw errors

#  PASS  test/httpGet.test.js

ok 998 — httpGet is a Function
ok 999 — httpGet does not throw errors

#  PASS  test/dropRightWhile.test.js

ok 1000 — dropRightWhile is a Function
ok 1001 — Removes elements from the end of an array until the passed function returns true.

#  PASS  test/isSimilar.test.js

ok 1002 — isSimilar is a Function
ok 1003 — isSimilar returns true
ok 1004 — isSimilar returns false

#  PASS  test/get.test.js

ok 1005 — get is a Function
ok 1006 — Retrieve a property indicated by the selector from an object.

#  PASS  test/omitBy.test.js

ok 1007 — omitBy is a Function
ok 1008 — Creates an object composed of the properties the given function returns falsey for

#  PASS  test/compact.test.js

ok 1009 — compact is a Function
ok 1010 — Removes falsey values from an array

#  PASS  test/unescapeHTML.test.js

ok 1011 — unescapeHTML is a Function
ok 1012 — Unescapes escaped HTML characters.

#  PASS  test/createElement.test.js

ok 1013 — createElement is a Function
ok 1014 — createElement creates an element

#  PASS  test/isFunction.test.js

ok 1015 — isFunction is a Function
ok 1016 — passed value is a function
ok 1017 — passed value is not a function

#  PASS  test/pullBy.test.js

ok 1018 — pullBy is a Function
ok 1019 — Pulls the specified values

#  PASS  test/removeVowels.test.js

ok 1020 — removeVowels is a Function
ok 1021 — Removes vowels.
ok 1022 — Replaces vowels.

#  PASS  test/isBoolean.test.js

ok 1023 — isBoolean is a Function
ok 1024 — passed value is not a boolean
ok 1025 — passed value is not a boolean

#  PASS  test/throttle.test.js

ok 1026 — throttle is a Function
ok 1027 — throttle returns a function

#  PASS  test/escapeHTML.test.js

ok 1028 — escapeHTML is a Function
ok 1029 — Escapes a string for use in HTML

#  PASS  test/show.test.js

ok 1030 — show is a Function
ok 1031 — show shows an element

#  PASS  test/hasClass.test.js

ok 1032 — hasClass is a Function
ok 1033 — hasClass returns the proper value

#  PASS  test/xProd.test.js

ok 1034 — xProd is a Function
ok 1035 — xProd([1, 2], ['a', 'b']) returns [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]

#  PASS  test/unflattenObject.test.js

ok 1036 — unflattenObject is a Function
ok 1037 — Unflattens an object with the paths for keys

#  PASS  test/isNumber.test.js

ok 1038 — isNumber is a Function
ok 1039 — passed argument is a number
ok 1040 — passed argument is not a number

#  PASS  test/stableSort.test.js

ok 1041 — stableSort is a Function
ok 1042 — Array is properly sorted

#  PASS  test/sortCharactersInString.test.js

ok 1043 — sortCharactersInString is a Function
ok 1044 — Alphabetically sorts the characters in a string.

#  PASS  test/hide.test.js

ok 1045 — hide is a Function
ok 1046 — hide hides an element

#  PASS  test/unfold.test.js

ok 1047 — unfold is a Function
ok 1048 — Works with a given function, producing an array

#  PASS  test/forEachRight.test.js

ok 1049 — forEachRight is a Function
ok 1050 — Iterates over the array in reverse

#  PASS  test/ary.test.js

ok 1051 — ary is a Function
ok 1052 — Discards arguments with index >=n

#  PASS  test/stripHTMLTags.test.js

ok 1053 — stripHTMLTags is a Function
ok 1054 — Removes HTML tags

#  PASS  test/objectToPairs.test.js

ok 1055 — objectToPairs is a Function
ok 1056 — Creates an array of key-value pair arrays from an object.

#  PASS  test/objectFromPairs.test.js

ok 1057 — objectFromPairs is a Function
ok 1058 — Creates an object from the given key-value pairs.

#  PASS  test/curry.test.js

ok 1059 — curry is a Function
ok 1060 — curries a Math.pow
ok 1061 — curries a Math.min

#  PASS  test/toDecimalMark.test.js

ok 1062 — toDecimalMark is a Function
ok 1063 — convert a float-point arithmetic to the Decimal mark form

#  PASS  test/forOwn.test.js

ok 1064 — forOwn is a Function
ok 1065 — Iterates over an element's key-value pairs

#  PASS  test/isPrime.test.js

ok 1066 — isPrime is a Function
ok 1067 — passed number is a prime
ok 1068 — passed number is not a prime

#  PASS  test/findLastIndex.test.js

ok 1069 — findLastIndex is a Function
ok 1070 — Finds last index for which the given function returns true

#  PASS  test/pick.test.js

ok 1071 — pick is a Function
ok 1072 — Picks the key-value pairs corresponding to the given keys from an object.

#  PASS  test/isNull.test.js

ok 1073 — isNull is a Function
ok 1074 — passed argument is a null
ok 1075 — passed argument is a null

#  PASS  test/filterNonUnique.test.js

ok 1076 — filterNonUnique is a Function
ok 1077 — Filters out the non-unique values in an array

#  PASS  test/dropWhile.test.js

ok 1078 — dropWhile is a Function
ok 1079 — Removes elements in an array until the passed function returns true.

#  PASS  test/takeRightWhile.test.js

ok 1080 — takeRightWhile is a Function
ok 1081 — Removes elements until the function returns true

#  PASS  test/atob.test.js

ok 1082 — atob is a Function
ok 1083 — atob("Zm9vYmFy") equals "foobar"
ok 1084 — atob("Z") returns ""

#  PASS  test/removeNonASCII.test.js

ok 1085 — removeNonASCII is a Function
ok 1086 — Removes non-ASCII characters

#  PASS  test/nodeListToArray.test.js

ok 1087 — nodeListToArray is a Function
ok 1088 — nodeListToArray returns an array of proper length

#  PASS  test/delay.test.js

ok 1089 — delay is a Function
ok 1090 — Works as expecting, passing arguments properly

#  PASS  test/remove.test.js

ok 1091 — remove is a Function
ok 1092 — Removes elements from an array for which the given function returns false

#  PASS  test/hz.test.js

ok 1093 — hz is a Function
ok 1094 — hz returns a number
ok 1095 — hz returns a number

#  PASS  test/defaults.test.js

ok 1096 — defaults is a Function
ok 1097 — Assigns default values for undefined properties

#  PASS  test/countOccurrences.test.js

ok 1098 — countOccurrences is a Function
ok 1099 — Counts the occurrences of a value in an array

#  PASS  test/omit.test.js

ok 1100 — omit is a Function
ok 1101 — Omits the key-value pairs corresponding to the given keys from an object

#  PASS  test/clampNumber.test.js

ok 1102 — clampNumber is a Function
ok 1103 — Clamps num within the inclusive range specified by the boundary values a and b

#  PASS  test/intersection.test.js

ok 1104 — intersection is a Function
ok 1105 — Returns a list of elements that exist in both arrays

#  PASS  test/over.test.js

ok 1106 — over is a Function
ok 1107 — Applies given functions over multiple arguments

#  PASS  test/truncateString.test.js

ok 1108 — truncateString is a Function
ok 1109 — Truncates a "boomerang" up to a specified length.

#  PASS  test/parseCookie.test.js

ok 1110 — parseCookie is a Function
ok 1111 — Parses the cookie

#  PASS  test/pull.test.js

ok 1112 — pull is a Function
ok 1113 — Pulls the specified values

#  PASS  test/isBrowserTabFocused.test.js

ok 1114 — isBrowserTabFocused is a Function
ok 1115 — isBrowserTabFocused is a Function

#  PASS  test/similarity.test.js

ok 1116 — similarity is a Function
ok 1117 — Returns an array of elements that appear in both arrays.

#  PASS  test/isEven.test.js

ok 1118 — isEven is a Function
ok 1119 — 4 is even number
ok 1120 — 5 is not an even number

#  PASS  test/findLast.test.js

ok 1121 — findLast is a Function
ok 1122 — Finds last element for which the given function returns true

#  PASS  test/fibonacciUntilNum.test.js

ok 1123 — fibonacciUntilNum is a Function
ok 1124 — Returns the correct sequence

#  PASS  test/times.test.js

ok 1125 — times is a Function
ok 1126 — Runs a function the specified amount of times

#  PASS  test/fibonacciCountUntilNum.test.js

ok 1127 — fibonacciCountUntilNum is a Function
ok 1128 — Returns the correct number

#  PASS  test/cloneRegExp.test.js

ok 1129 — cloneRegExp is a Function
ok 1130 — Clones regular expressions properly

#  PASS  test/coalesce.test.js

ok 1131 — coalesce is a Function
ok 1132 — Returns the first non-null/undefined argument

#  PASS  test/escapeRegExp.test.js

ok 1133 — escapeRegExp is a Function
ok 1134 — Escapes a string to use in a regular expression

#  PASS  test/JSONToDate.test.js

ok 1135 — JSONToDate is a Function
ok 1136 — JSONToDate returns the correct date string

#  PASS  test/tail.test.js

ok 1137 — tail is a Function
ok 1138 — Returns tail
ok 1139 — Returns tail

#  PASS  test/primes.test.js

ok 1140 — primes is a Function
ok 1141 — Generates primes up to a given number, using the Sieve of Eratosthenes.

#  PASS  test/powerset.test.js

ok 1142 — powerset is a Function
ok 1143 — Returns the powerset of a given array of numbers.

#  PASS  test/fibonacci.test.js

ok 1144 — fibonacci is a Function
ok 1145 — Generates an array, containing the Fibonacci sequence

#  PASS  test/distance.test.js

ok 1146 — distance is a Function
ok 1147 — Calculates the distance between two points

#  PASS  test/difference.test.js

ok 1148 — difference is a Function
ok 1149 — Returns the difference between two arrays

#  PASS  test/negate.test.js

ok 1150 — negate is a Function
ok 1151 — Negates a predicate function

#  PASS  test/deepFlatten.test.js

ok 1152 — deepFlatten is a Function
ok 1153 — Deep flattens an array

#  PASS  test/RGBToHex.test.js

ok 1154 — RGBToHex is a Function
ok 1155 — Converts the values of RGB components to a color code.

#  PASS  test/hammingDistance.test.js

ok 1156 — hammingDistance is a Function
ok 1157 — retuns hamming disance between 2 values

#  PASS  test/currentURL.test.js

ok 1158 — currentURL is a Function
ok 1159 — currentURL returns the appropriate value

#  PASS  test/everyNth.test.js

ok 1160 — everyNth is a Function
ok 1161 — Returns every nth element in an array

#  PASS  test/initial.test.js

ok 1162 — initial is a Function
ok 1163 — Returns all the elements of an array except the last one

#  PASS  test/unionBy.test.js

ok 1164 — unionBy is a Function
ok 1165 — Produces the appropriate results

#  PASS  test/serializeCookie.test.js

ok 1166 — serializeCookie is a Function
ok 1167 — Serializes the cookie

#  PASS  test/sleep.test.js

ok 1168 — sleep is a Function
ok 1169 — Works as expected

#  PASS  test/unary.test.js

ok 1170 — unary is a Function
ok 1171 — Discards arguments after the first one

#  PASS  test/bottomVisible.test.js

ok 1172 — bottomVisible is a Function
ok 1173 — bottomVisible returns a boolean

#  PASS  test/mapKeys.test.js

ok 1174 — mapKeys is a Function
ok 1175 — Maps keys

#  PASS  test/radsToDegrees.test.js

ok 1176 — radsToDegrees is a Function
ok 1177 — Returns the appropriate value

#  PASS  test/isSymbol.test.js

ok 1178 — isSymbol is a Function
ok 1179 — Checks if the given argument is a symbol

#  PASS  test/digitize.test.js

ok 1180 — digitize is a Function
ok 1181 — Converts a number to an array of digits

#  PASS  test/call.test.js

ok 1182 — call is a Function
ok 1183 — Calls function on given object

#  PASS  test/reverseString.test.js

ok 1184 — reverseString is a Function
ok 1185 — Reverses a string.

#  PASS  test/isUndefined.test.js

ok 1186 — isUndefined is a Function
ok 1187 — Returns true for undefined

#  PASS  test/isDivisible.test.js

ok 1188 — isDivisible is a Function
ok 1189 — The number 6 is divisible by 3

#  PASS  test/heronArea.test.js

ok 1190 — heronArea is a Function
ok 1191 — howManyTimes returns the correct result

#  PASS  test/colorize.test.js

ok 1192 — colorize is a Function
ok 1193 — Returns the appropriate value

#  PASS  test/squareSum.test.js

ok 1194 — squareSum is a Function
ok 1195 — squareSum returns the proper result

#  PASS  test/sdbm.test.js

ok 1196 — sdbm is a Function
ok 1197 — Hashes the input string into a whole number.

#  PASS  test/mphToKmph.test.js

ok 1198 — mphToKmph is a Function
ok 1199 — Returns kph from mph.

#  PASS  test/debounce.test.js

ok 1200 — debounce is a Function
ok 1201 — Works as expected

#  PASS  test/sum.test.js

ok 1202 — sum is a Function
ok 1203 — Returns the sum of two or more numbers/arrays.

#  PASS  test/isBrowser.test.js

ok 1204 — isBrowser is a Function
ok 1205 — isBrowser is a Function

#  PASS  test/prefix.test.js

ok 1206 — prefix is a Function
ok 1207 — prefix is a Function

#  PASS  test/timeTaken.test.js

ok 1208 — timeTaken is a Function
ok 1209 — timeTaken is a Function

#  PASS  test/kmphToMph.test.js

ok 1210 — kmphToMph is a Function
ok 1211 — Returns mph from kph.

#  PASS  test/pipeLog.test.js

ok 1212 — pipeLog is a Function
ok 1213 — pipeLog returns the given value

#  PASS  test/btoa.test.js

ok 1214 — btoa is a Function
ok 1215 — btoa("foobar") equals "Zm9vYmFy"

#  PASS  test/recordAnimationFrames.test.js

ok 1216 — recordAnimationFrames is a Function

#  PASS  test/UUIDGeneratorBrowser.test.js

ok 1217 — UUIDGeneratorBrowser is a Function

#  PASS  test/onUserInputChange.test.js

ok 1218 — onUserInputChange is a Function

#  PASS  test/detectDeviceType.test.js

ok 1219 — detectDeviceType is a Function

#  PASS  test/observeMutations.test.js

ok 1220 — observeMutations is a Function

#  PASS  test/speechSynthesis.test.js

ok 1221 — speechSynthesis is a Function

#  PASS  test/arrayToHtmlList.test.js

ok 1222 — arrayToHtmlList is a Function

#  PASS  test/readFileLines.test.js

ok 1223 — readFileLines is a Function

#  PASS  test/httpsRedirect.test.js

ok 1224 — httpsRedirect is a Function

#  PASS  test/smoothScroll.test.js

ok 1225 — smoothScroll is a Function

#  PASS  test/hashBrowser.test.js

ok 1226 — hashBrowser is a Function

#  PASS  test/scrollToTop.test.js

ok 1227 — scrollToTop is a Function

#  PASS  test/JSONToFile.test.js

ok 1228 — JSONToFile is a Function

#  PASS  test/dayOfYear.test.js

ok 1229 — dayOfYear is a Function

#  PASS  test/hasFlags.test.js

ok 1230 — hasFlags is a Function

#  PASS  test/setStyle.test.js

ok 1231 — setStyle is a Function

#  PASS  test/redirect.test.js

ok 1232 — redirect is a Function

#  PASS  test/runAsync.test.js

ok 1233 — runAsync is a Function

#  PASS  test/defer.test.js

ok 1234 — defer is a Function

1..1234

# Test Suites: 100% ██████████, 360 passed, 360 total
# Tests:       100% ██████████, 1234 passed, 1234 total
# Time:        55.142s

# Ran all test suites.

